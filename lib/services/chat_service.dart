import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:math';
import '../models/workout_log.dart';
import '../models/ai_workout_plan.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../services/survey_service.dart';
import 'chat_functions.dart';
import 'dart:async';
import 'dart:io';
import 'package:path/path.dart' as path;
import '../models/chat_message.dart';
import '../models/exercise.dart';
import '../models/workout.dart';
import 'package:uuid/uuid.dart';
import 'package:flutter/material.dart';

class ChatService {
  final _supabase = Supabase.instance.client;
  final _messagesController = StreamController<List<ChatMessage>>.broadcast();
  final String _chatId;
  final Map<String, List<ChatMessage>> _chatMessages = {};
  Map<String, dynamic>? _lastWorkoutSuggestion;
  bool _isInitialized = false;
  final scrollController = ScrollController();

  List<Map<String, dynamic>> _savedWorkouts = [];
  Map<String, dynamic>? _userProfile;
  List<ChatMessage> _messageHistory = [];

  List<Map<String, dynamic>> get savedWorkouts => _savedWorkouts;
  Map<String, dynamic>? get userProfile => _userProfile;
  List<ChatMessage> get messageHistory => _messageHistory;

  ChatService({String chatId = 'default'}) : _chatId = chatId {
    _initializeChat();
  }

  String get currentChatId => _chatId;
  Map<String, dynamic>? get lastWorkoutSuggestion => _lastWorkoutSuggestion;
  Stream<List<ChatMessage>> get messagesStream => _messagesController.stream;

  Future<void> _initializeChat() async {
    if (_isInitialized) return;

    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) {
        debugPrint('User not logged in');
        return;
      }

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      _chatMessages.clear();

      // Load existing messages
      final response = await _supabase
          .from('chat_messages')
          .select()
          .eq('user_id', userId)
          .eq('chat_id', _chatId)
          .order('created_at', ascending: true);

      final messages = (response as List)
          .map((msg) => ChatMessage.fromJson(msg as Map<String, dynamic>))
          .toList();

      _chatMessages[_chatId] = messages;
      _messagesController.add(messages);

      // Scroll to bottom after loading initial messages
      if (scrollController.hasClients) {
        scrollController.animateTo(
          scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }

      _isInitialized = true;
    } catch (e) {
      debugPrint('Error initializing chat: $e');
    }
  }

  Future<void> _loadMessages() async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) return;

      //
      final response = await _supabase
          .from('chat_messages')
          .select()
          .eq('user_id', userId)
          .eq('chat_id', _chatId)
          .order('created_at', ascending: true);

      final messages = (response as List)
          .map((msg) => ChatMessage.fromJson(msg as Map<String, dynamic>))
          .toList();

      //
      _chatMessages[_chatId] = messages;
      _messagesController.add(messages);

      // Scroll to bottom after loading messages
      if (scrollController.hasClients) {
        scrollController.animateTo(
          scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    } catch (e) {
      debugPrint('Error loading messages: $e');
    }
  }

  String _formatAIMessage(String message, bool isFirstMessage) {
    var formatted = message.replaceAll(RegExp(r'\s+'), ' ').trim();

    // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    final emojiCategories = {
      'greeting': ['üëã', '‚ú®', 'üåü', 'üí´', 'üòä', 'ü§ó', 'üëç', 'üôå', 'üëè', 'üéâ'],
      'workout': ['üí™', 'üèãÔ∏è', 'üî•', '‚ö°', 'üèÉ', 'ü§∏', 'üßò', 'üèÜ', 'üíØ', 'üöÄ'],
      'nutrition': [
        'ü•ó',
        'üçé',
        'ü•ë',
        'ü•©',
        'üçó',
        'ü•¶',
        'ü•õ',
        'üçì',
        'üçΩÔ∏è',
        'ü•ù'
      ],
      'progress': ['üìà', 'üéØ', 'üåü', 'üí´', 'üöÄ', 'üîù', 'üèÜ', 'üåà', 'üíé', '‚úÖ'],
      'motivation': ['üí™', 'üî•', '‚ö°', '‚ú®', 'üíØ', 'üöÄ', 'üéØ', 'üìà', '‚≠ê', 'üíé'],
      'recovery': ['üßò', 'üíÜ', 'üåø', 'üß†', 'üò¥', 'üåô', '‚è±Ô∏è', 'üîÑ', 'üåä', 'üßñ'],
      'profile': ['üë§', 'üìù', '‚úèÔ∏è', '‚ú®', 'üß©', 'üìä', 'üîç', 'üßø', 'üìå', 'üìã'],
      'system': ['üîÑ', '‚öôÔ∏è', 'üîß', 'üì¢', 'üîî', 'üîé', 'üñ•Ô∏è', 'üì±', '‚å®Ô∏è', 'üîå'],
      'error': ['‚ö†Ô∏è', '‚ùå', 'üö´', '‚õî', 'üòµ', 'üÜò', '‚≠ï', 'üî¥', '‚ùó', '‚ùì'],
      'success': ['‚úÖ', 'üëç', 'üåü', 'üí´', 'üéâ', 'ü•≥', 'üèÜ', 'üéä', 'üíØ', 'ü§©'],
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    String messageType = 'workout'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (formatted.toLowerCase().contains(RegExp(r'–ø—Ä–∏–≤–µ—Ç|hello|hi |hey'))) {
      messageType = 'greeting';
    } else if (formatted.toLowerCase().contains(
        RegExp(r'–µ–¥–∞|–ø–∏—Ç–∞–Ω–∏–µ|–∫–∞–ª–æ—Ä–∏–∏|protein|nutrition|diet|eat|food|meal'))) {
      messageType = 'nutrition';
    } else if (formatted
        .toLowerCase()
        .contains(RegExp(r'–æ—Ç–¥—ã—Ö|–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ|—Å–æ–Ω|rest|recovery|sleep'))) {
      messageType = 'recovery';
    } else if (formatted
        .toLowerCase()
        .contains(RegExp(r'–ø—Ä–æ–≥—Ä–µ—Å—Å|progress|improve|growth|—Ä–∞–∑–≤–∏—Ç–∏–µ'))) {
      messageType = 'progress';
    } else if (formatted
        .toLowerCase()
        .contains(RegExp(r'–º–æ—Ç–∏–≤–∞—Ü–∏—è|motivation|inspire|push|—Å—Ç–∏–º—É–ª'))) {
      messageType = 'motivation';
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω
    if (!formatted.contains(RegExp(r'^[\p{Emoji}]', unicode: true))) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final emojis = emojiCategories[messageType]!;
      final random = Random();
      formatted = "${emojis[random.nextInt(emojis.length)]} $formatted";
    }

    // –î–µ–ª–∏–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    final paragraphs = formatted.split('\n\n');
    if (paragraphs.length > 1) {
      final random = Random();
      final emojis = emojiCategories[messageType]!;

      for (var i = 1; i < paragraphs.length; i++) {
        if (paragraphs[i].isNotEmpty &&
            !paragraphs[i].startsWith(RegExp(r'[\p{Emoji}]', unicode: true)) &&
            random.nextDouble() < 0.5) {
          // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
          paragraphs[i] =
              "${emojis[random.nextInt(emojis.length)]} ${paragraphs[i]}";
        }
      }
      formatted = paragraphs.join('\n\n');
    }

    // –¢–µ–ø–µ—Ä—å —É–ª—É—á—à–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å —ç–º–æ–¥–∑–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ–±–∞–≤–∏–ª –∏—Ö)
    if (formatted.contains(RegExp(r'^- |^\d+\. |^‚Ä¢ ', multiLine: true))) {
      final random = Random();
      final emojis = emojiCategories[messageType]!;

      // –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
      formatted = formatted.replaceAllMapped(RegExp(r'(^|\n)(- |‚Ä¢ )([^-\n‚Ä¢]+)'),
          (match) {
        if (random.nextDouble() < 0.5 &&
            !match.group(3)!.contains(RegExp(r'[\p{Emoji}]', unicode: true))) {
          return "${match.group(1)!}${match.group(2)!}${emojis[random.nextInt(emojis.length)]} ${match.group(3)!}";
        }
        return match.group(0)!;
      });

      // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
      formatted = formatted
          .replaceAllMapped(RegExp(r'(^|\n)(\d+\. )([^\.\n]+)'), (match) {
        if (random.nextDouble() < 0.5 &&
            !match.group(3)!.contains(RegExp(r'[\p{Emoji}]', unicode: true))) {
          return "${match.group(1)!}${match.group(2)!}${emojis[random.nextInt(emojis.length)]} ${match.group(3)!}";
        }
        return match.group(0)!;
      });
    }

    // Clean up multiple asterisks and format bold text properly
    formatted = formatted
        .replaceAll(
            RegExp(r'\*{2,}'), '**') // Replace multiple asterisks with double
        .replaceAll(
            RegExp(r'(\*\*\s*\*\*|\*\*\s+\*\*)'), ' ') // Remove empty bold tags
        .replaceAll(RegExp(r'\s+'), ' '); // Clean up multiple spaces

    // Format numbers and important terms as bold if not already formatted
    if (!formatted.contains('**')) {
      formatted = formatted.replaceAllMapped(
          RegExp(
              r'\b(weight|gain|loss|bulk|cut|workout|strength|cardio|form|muscle|fitness|goal|progress|training|exercise|calories|protein|sets|reps|\d+(?:g|lbs|kg|kcal)?)\b'),
          (match) {
        var term = match.group(0)!;
        return term.contains('**') ? term : '**$term**';
      });
    }

    return formatted;
  }

  Future<void> _sendMessage(String message, {String action = 'chat'}) async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) {
        debugPrint('User not logged in');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      final isWorkoutGenerator = false; // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
      if (message.startsWith('WORKOUT_GENERATOR:')) {
        message = message.replaceFirst('WORKOUT_GENERATOR:', '').trim();
        // –ù–µ –º–µ–Ω—è–µ–º action, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      }

      // Get AI response first
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
      Map<String, dynamic>? userProfile;
      if (isWorkoutGenerator ||
          action == 'profile_update' ||
          message.toLowerCase().contains('workout') ||
          message.toLowerCase().contains('exercise') ||
          message.toLowerCase().contains('training')) {
        final userProfileResponse =
            await _supabase.from('user_profiles').select().eq('id', userId);

        userProfile =
            userProfileResponse.isNotEmpty ? userProfileResponse[0] : null;

        if (userProfile == null) {
          throw Exception(
              'Please complete your profile setup before requesting workout-related advice');
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
      final existingMessages = await _supabase
          .from('chat_messages')
          .select('id')
          .eq('user_id', userId)
          .eq('chat_id', _chatId)
          .limit(1);

      final isVeryFirstMessage = existingMessages.isEmpty;

      final response = await _supabase.functions.invoke(
        'chat',
        body: {
          'message': message,
          'action': action,
          'is_first_message': isVeryFirstMessage,
          'profile': userProfile != null
              ? {
                  ...userProfile,
                  'current_stats': {
                    'weight': userProfile['weight'],
                    'height': userProfile['height'],
                    'gender': userProfile['gender'],
                    'age': userProfile['age'],
                    'activity_level': userProfile['activity_level'],
                    'fitness_level': userProfile['fitness_level'],
                  },
                  'preferences': {
                    'goals': userProfile['goals'],
                    'equipment': userProfile['equipment'],
                    'injuries': userProfile['injuries'],
                    'weekly_workouts': userProfile['weekly_workouts'],
                    'workout_duration': userProfile['workout_duration'],
                  },
                  'history': await _getRecentMessages(userId),
                }
              : null,
        },
        headers: {
          'Authorization':
              'Bearer ${_supabase.auth.currentSession?.accessToken}',
        },
      );

      if (response.status != 200) {
        throw 'Error: ${response.status} - ${response.data?.toString() ?? "Unknown error"}';
      }

      final data = response.data;
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      String aiMessage = data['message'] as String;

      // –£–¥–∞–ª—è–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
      aiMessage = _removeJsonStructures(aiMessage);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
      aiMessage = _limitMessageSize(aiMessage);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      aiMessage = _formatAIMessage(aiMessage, isVeryFirstMessage);

      // Save both messages in a single transaction
      final messages = [];

      // Save user message if not in workout generator mode
      if (!isWorkoutGenerator) {
        messages.add({
          'user_id': userId,
          'content': message,
          'is_user': true,
          'image_url': null,
          'chat_id': _chatId,
          'created_at': DateTime.now().toIso8601String(),
        });
      }

      // Save AI response
      messages.add({
        'user_id': userId,
        'content': aiMessage,
        'is_user': false,
        'image_url': null,
        'chat_id': _chatId,
        'created_at': DateTime.now().toIso8601String(),
      });

      final responses =
          await _supabase.from('chat_messages').insert(messages).select();

      final chatMessages =
          (responses as List).map((msg) => ChatMessage.fromJson(msg)).toList();

      final currentMessages = _chatMessages[_chatId] ?? [];
      _chatMessages[_chatId] = [...currentMessages, ...chatMessages];
      _messagesController.add(_chatMessages[_chatId]!);

      // Update context from server
      if (data['context'] != null) {
        final context = data['context'];
        if (context['workouts'] != null) {
          _savedWorkouts = List<Map<String, dynamic>>.from(context['workouts']);
        }
        if (context['profile'] != null) {
          _userProfile = Map<String, dynamic>.from(context['profile']);
        }
        if (context['messageHistory'] != null) {
          _messageHistory = (context['messageHistory'] as List)
              .map((m) => ChatMessage(
                    id: const Uuid().v4(),
                    userId: userId,
                    chatId: _chatId,
                    content: m['content'],
                    isUser: m['role'] == 'user',
                    createdAt: DateTime.now(),
                  ))
              .toList();
        }
      }

      // Scroll to bottom with improved animation
      Future.delayed(const Duration(milliseconds: 300), () {
        if (scrollController.hasClients) {
          scrollController.animateTo(
            scrollController.position.maxScrollExtent,
            duration: const Duration(milliseconds: 500),
            curve: Curves.easeOutCubic, // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
          );
        }
      });
    } catch (e) {
      debugPrint('Error sending message: $e');
      rethrow;
    }
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä –∏–∑ –æ—Ç–≤–µ—Ç–∞
  String _removeJsonStructures(String message) {
    // –ò—â–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    final jsonPattern =
        RegExp(r'```(?:json)?\s*\{\s*".*?"\s*:.*?\}\s*```', dotAll: true);

    // –ó–∞–º–µ–Ω—è–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    return message.replaceAllMapped(jsonPattern, (match) {
      // –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å JSON
      return "–Ø –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –≤–∞—Å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å.";
    });
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  String _limitMessageSize(String message) {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    const int maxLength = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    if (message.length > maxLength) {
      // –î–µ–ª–∏–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
      final paragraphs = message.split('\n\n');

      if (paragraphs.length > 3) {
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º
        message = paragraphs.take(3).join('\n\n');

        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
        if (message.length > maxLength) {
          message = message.substring(0, maxLength);
          // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –¥–ª—è "–∫—Ä–∞—Å–∏–≤–æ–≥–æ" –æ–±—Ä–µ–∑–∞–Ω–∏—è
          final lastDot = message.lastIndexOf('.');
          if (lastDot > maxLength * 0.8) {
            // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É
            message = message.substring(0, lastDot + 1);
          }
        }
      } else {
        // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –º–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
        message = message.substring(0, maxLength);
        final lastDot = message.lastIndexOf('.');
        if (lastDot > maxLength * 0.8) {
          message = message.substring(0, lastDot + 1);
        }
      }
    }

    return message;
  }

  Map<String, dynamic>? _extractWorkoutJson(String content) {
    try {
      final jsonStart = content.indexOf('{');
      final jsonEnd = content.lastIndexOf('}');

      if (jsonStart >= 0 && jsonEnd > jsonStart) {
        final jsonStr = content.substring(jsonStart, jsonEnd + 1);
        final json = jsonDecode(jsonStr);

        if (json is Map<String, dynamic> &&
            json.containsKey('name') &&
            json.containsKey('exercises')) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
          final exercises = (json['exercises'] as List).map((e) {
            if (e is Map<String, dynamic>) {
              return {
                'name': e['name'],
                'sets': e['sets'],
                'reps': e['reps'],
                'target_muscle_group': e['targetMuscleGroup'] ??
                    e['target_muscle_group'] ??
                    'Full Body',
                'equipment': e['equipment'] ?? 'none'
              };
            }
            return e;
          }).toList();

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          final workoutData = {
            'name': json['name'],
            'description': json['description'] ?? 'AI Generated Workout',
            'focus': json['focus'] ?? json['name'],
            'difficulty': json['difficulty'] ?? 'intermediate',
            'duration': json['duration'] ?? 45,
            'category': 'ai_generated',
            'equipment': json['equipment'] ?? ['none'],
            'exercises': exercises,
            'target_muscles': json['target_muscles'] ??
                json['targetMuscles'] ??
                [json['focus'] ?? 'Full Body']
          };

          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
          workoutData.remove('warmUp');
          workoutData.remove('coolDown');
          workoutData.remove('totalDuration');
          workoutData.remove('exerciseTime');
          workoutData.remove('restBetweenSets');
          workoutData.remove('restBetweenExercises');

          return workoutData;
        }
      }
      return null;
    } catch (e) {
      debugPrint('Error extracting workout JSON: $e');
      return null;
    }
  }

  Future<void> saveWorkout(Map<String, dynamic> workout) async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) throw Exception('User not authenticated');

      //
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º superSetId
      final exercises = (workout['exercises'] as List).map((e) {
        final superSetId = e['superSetId'] ?? e['super_set_id'];
        return Exercise.basic(
          name: e['name'],
          targetMuscleGroup:
              e['targetMuscleGroup'] ?? e['target_muscle_group'] ?? 'Full Body',
          equipment: e['equipment'],
          sets: e['sets']?.toString() ?? "4",
          reps: e['reps']?.toString() ?? "12",
          difficulty:
              e['difficulty'] ?? workout['difficulty'] ?? 'Intermediate',
          description: e['description'] ?? e['notes'] ?? '',
          superSetId: superSetId,
        );
      }).toList();

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      final fullWorkout = Workout(
        id: const Uuid().v4(),
        name: workout['name'],
        description: workout['description'] ?? 'AI Generated Workout',
        exercises: exercises,
        duration: workout['duration'] ?? 45,
        difficulty: workout['difficulty'] ?? 'intermediate',
        equipment: List<String>.from(workout['equipment'] ?? []),
        targetMuscles: List<String>.from(workout['target_muscles'] ??
            workout['targetMuscles'] ??
            [workout['focus'] ?? 'Full Body']),
        focus: workout['focus'] ?? workout['name'],
        isAIGenerated: true,
        isFavorite: true,
        createdAt: DateTime.now(),
        warmUp: workout['warmUp'] ?? '',
        coolDown: workout['coolDown'] ?? '',
        totalDuration: Duration(minutes: workout['totalDuration'] ?? 60),
        exerciseTime: Duration(seconds: workout['exerciseTime'] ?? 45),
        restBetweenSets: Duration(seconds: workout['restBetweenSets'] ?? 30),
        restBetweenExercises:
            Duration(minutes: workout['restBetweenExercises'] ?? 1),
        instructions: workout['instructions'],
        tips:
            workout['tips'] != null ? List<String>.from(workout['tips']) : null,
      );

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      final workoutData = {
        'user_id': userId,
        'name': fullWorkout.name,
        'description': fullWorkout.description,
        'exercises': fullWorkout.exercises
            .map((e) => {
                  'name': e.name,
                  'description': e.description,
                  'equipment': e.equipment,
                  'sets': e.sets,
                  'reps': e.reps,
                  'target_muscle_group': e.targetMuscleGroup,
                  'difficulty': e.difficulty,
                  'super_set_id': e.superSetId,
                  'video_url': e.videoUrl,
                  'instructions': e.instructions,
                  'common_mistakes': e.commonMistakes,
                  'modifications': e.modifications,
                  'exercise_time': e.exerciseTime.inSeconds,
                  'rest_time': e.restTime.inSeconds,
                })
            .toList(),
        'difficulty': fullWorkout.difficulty,
        'equipment': fullWorkout.equipment,
        'target_muscles': fullWorkout.targetMuscles,
        'focus': fullWorkout.focus,
        'duration': fullWorkout.duration,
        'created_at': fullWorkout.createdAt?.toIso8601String(),
        'is_favorite': true,
        'is_ai_generated': true,
        'category': workout['category'] ?? 'custom',
        'warm_up': fullWorkout.warmUp,
        'cool_down': fullWorkout.coolDown,
        'total_duration': fullWorkout.totalDuration.inMinutes,
        'exercise_time': fullWorkout.exerciseTime.inSeconds,
        'rest_between_sets': fullWorkout.restBetweenSets.inSeconds,
        'rest_between_exercises': fullWorkout.restBetweenExercises.inMinutes,
        'instructions': fullWorkout.instructions,
        'tips': fullWorkout.tips,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      final response =
          await _supabase.from('workouts').insert(workoutData).select();

      final savedWorkout = response.isNotEmpty ? response[0] : workoutData;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      _savedWorkouts.insert(0, savedWorkout);
    } catch (e) {
      debugPrint('Error saving workout: $e');
      rethrow;
    }
  }

  Future<void> clearHistory() async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) return;

      await _supabase
          .from('chat_messages')
          .delete()
          .eq('user_id', userId)
          .eq('chat_id', _chatId);

      _chatMessages[_chatId]?.clear();
      _messagesController.add([]);
    } catch (e) {
      debugPrint('Error clearing history: $e');
      rethrow;
    }
  }

  Future<void> deleteMessages(List<ChatMessage> messages) async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) return;

      final messageIds = messages.map((m) => m.id).toList();
      await _supabase
          .from('chat_messages')
          .delete()
          .filter('id', 'in', messageIds)
          .eq('user_id', userId);

      _chatMessages[_chatId]?.removeWhere((m) => messageIds.contains(m.id));
      _messagesController.add(_chatMessages[_chatId] ?? []);
    } catch (e) {
      debugPrint('Error deleting messages: $e');
      rethrow;
    }
  }

  Future<String> sendImage(String imagePath) async {
    try {
      final userId = _supabase.auth.currentUser?.id;
      if (userId == null) throw Exception('User not authenticated');

      final file = File(imagePath);
      final fileExt = path.extension(imagePath);
      final fileName = '${DateTime.now().toIso8601String()}$fileExt';

      await _supabase.storage
          .from('chat_images')
          .uploadBinary('$userId/$fileName', await file.readAsBytes());

      return _supabase.storage
          .from('chat_images')
          .getPublicUrl('$userId/$fileName');
    } catch (e) {
      debugPrint('Error sending image: $e');
      throw Exception('Failed to upload image: $e');
    }
  }

  Future<List<String>> getChatsList() async {
    return ['default'];
  }

  void scrollToBottom() {
    if (scrollController.hasClients) {
      scrollController.animateTo(
        scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }

  void dispose() {
    _messagesController.close();
    scrollController.dispose();
  }

  Future<void> updateProfile(Map<String, dynamic> profile) async {
    _userProfile = profile;
    await _sendMessage('Profile updated', action: 'profile_update');
  }

  Future<void> clearContext() async {
    await _sendMessage('', action: 'clear_history');
    _savedWorkouts = [];
    _userProfile = null;
    _messageHistory = [];
  }

  Future<void> sendMessage(String text, {String? imageUrl}) async {
    await _sendMessage(text);
  }

  Future<List<Map<String, dynamic>>> _getRecentMessages(String userId) async {
    try {
      final messages = await _supabase
          .from('chat_messages')
          .select()
          .eq('user_id', userId)
          .order('created_at', ascending: false)
          .limit(5);

      return List<Map<String, dynamic>>.from(messages);
    } catch (e) {
      debugPrint('Error getting recent messages: $e');
      return [];
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  Future<void> reloadMessages() async {
    _isInitialized = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await _initializeChat(); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void reset() {
    _isInitialized = false;
    _chatMessages.clear();
    _lastWorkoutSuggestion = null;
    _savedWorkouts = [];
    _userProfile = null;
    _messageHistory = [];
    _messagesController.add([]);
    debugPrint('ChatService reset completed');
  }
}
