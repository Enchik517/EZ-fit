import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:convert';
import 'dart:math' as math;

/// –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π JSON —Ñ–∞–π–ª–æ–≤
class JsonTestLoader {
  /// –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  static Future<Map<String, dynamic>> testJsonLoading() async {
    Map<String, dynamic> result = {
      'success': false,
      'assets_json_size': 0,
      'root_json_size': 0,
      'assets_json_content': '',
      'root_json_content': '',
      'assets_json_error': '',
      'root_json_error': '',
      'exercises_count': 0,
    };

    try {
      print('üß™ JsonTestLoader: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–æ–≤');

      // –¢–µ—Å—Ç 1: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ assets
      try {
        final String jsonString =
            await rootBundle.loadString('assets/exercise.json');
        result['assets_json_size'] = jsonString.length;

        if (jsonString.isNotEmpty) {
          result['assets_json_content'] =
              jsonString.substring(0, math.min(100, jsonString.length));
          try {
            final List<dynamic> decoded = json.decode(jsonString);
            result['exercises_count'] = decoded.length;
            result['success'] = true;
          } catch (e) {
            result['assets_json_error'] = '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: $e';
          }
        } else {
          result['assets_json_error'] = '–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª';
        }
      } catch (e) {
        result['assets_json_error'] = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e';
      }

      // –¢–µ—Å—Ç 2: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      try {
        final String jsonString = await rootBundle.loadString('exercise.json');
        result['root_json_size'] = jsonString.length;

        if (jsonString.isNotEmpty) {
          result['root_json_content'] =
              jsonString.substring(0, math.min(100, jsonString.length));
        } else {
          result['root_json_error'] = '–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª';
        }
      } catch (e) {
        result['root_json_error'] = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e';
      }

      print('üß™ JsonTestLoader: –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result');
      return result;
    } catch (e) {
      print('üß™ JsonTestLoader: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e');
      result['error'] = e.toString();
      return result;
    }
  }
}
