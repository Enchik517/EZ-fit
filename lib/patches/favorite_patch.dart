import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/workout.dart';
import '../models/exercise.dart';
import '../providers/workout_provider.dart';
import 'package:flutter/foundation.dart';
import 'package:provider/provider.dart';

/// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ (–Ω–µ –ø—É—Ç–∞—Ç—å —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏!)
/// –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - —ç—Ç–æ –¥–≤–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
/// –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ü–µ–ª–∏–∫–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ favorite_workouts
/// –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–º–µ—é—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å isFavorite –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
class FavoritePatch {
  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  static Future<bool> addToFavorites(
      BuildContext context, Workout workout) async {
    final scaffoldMessenger = ScaffoldMessenger.of(context);
    final workoutProvider =
        Provider.of<WorkoutProvider>(context, listen: false);

    if (kDebugMode)
      debugPrint('üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: ${workout.name}');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    scaffoldMessenger.showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              strokeWidth: 2,
            ),
            const SizedBox(width: 16),
            Text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ "${workout.name}" –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...'),
          ],
        ),
        duration: const Duration(seconds: 1),
      ),
    );

    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (kDebugMode) debugPrint('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $userId');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ñ–ª–∞–≥–æ–º isFavorite = true
      final favoriteWorkout = workout.copyWith(isFavorite: true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
      final existing = await Supabase.instance.client
          .from('favorite_workouts')
          .select()
          .eq('user_id', userId)
          .eq('workout_id', workout.id)
          .maybeSingle();

      if (existing != null) {
        if (kDebugMode) debugPrint('‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
        // –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await Supabase.instance.client.from('favorite_workouts').update({
          'workout_data': favoriteWorkout.toJson(),
          'updated_at': DateTime.now().toIso8601String(),
        }).eq('id', existing['id']);

        if (kDebugMode) debugPrint('‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        await Supabase.instance.client.from('favorite_workouts').insert({
          'user_id': userId,
          'workout_id': workout.id,
          'workout_name': workout.name,
          'workout_data': favoriteWorkout.toJson(),
          'created_at': DateTime.now().toIso8601String(),
        });

        if (kDebugMode) debugPrint('‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      }

      // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ workouts
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ workouts
        final workoutRecord = await Supabase.instance.client
            .from('workouts')
            .select()
            .eq('id', workout.id)
            .maybeSingle();

        if (workoutRecord != null) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ workouts
          await Supabase.instance.client
              .from('workouts')
              .update({'is_favorite': true}).eq('id', workout.id);

          if (kDebugMode) debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ workouts');
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ workouts
          await Supabase.instance.client.from('workouts').insert({
            'id': workout.id,
            'user_id': userId,
            'name': workout.name,
            'description': workout.description,
            'difficulty': workout.difficulty,
            'equipment': workout.equipment,
            'target_muscles': workout.targetMuscles,
            'focus': workout.focus,
            'duration': workout.duration,
            'is_favorite': true,
            'created_at': DateTime.now().toIso8601String()
          });

          if (kDebugMode) debugPrint('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ workouts');
        }
      } catch (e) {
        if (kDebugMode) debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã workouts: $e');
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      await workoutProvider.loadWorkouts();

      // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      final favorites = workoutProvider.getFavoriteWorkouts();
      if (kDebugMode)
        debugPrint(
            'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${favorites.length}');

      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      if (kDebugMode) {
        for (var i = 0; i < favorites.length; i++) {
          debugPrint(
              'üìå Favorite #${i + 1}: ${favorites[i].name} (ID: ${favorites[i].id})');
        }
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Text('${workout.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 2),
        ),
      );

      return true;
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: $e');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );

      return false;
    }
  }

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  static Future<bool> removeFromFavorites(
      BuildContext context, Workout workout) async {
    final scaffoldMessenger = ScaffoldMessenger.of(context);
    final workoutProvider =
        Provider.of<WorkoutProvider>(context, listen: false);

    if (kDebugMode)
      debugPrint('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${workout.name}');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    scaffoldMessenger.showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              strokeWidth: 2,
            ),
            const SizedBox(width: 16),
            Text('–£–¥–∞–ª–µ–Ω–∏–µ "${workout.name}" –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...'),
          ],
        ),
        duration: const Duration(seconds: 1),
      ),
    );

    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ñ–ª–∞–≥–æ–º isFavorite = false
      final notFavoriteWorkout = workout.copyWith(isFavorite: false);

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      await Supabase.instance.client
          .from('favorite_workouts')
          .delete()
          .eq('user_id', userId)
          .eq('workout_id', workout.id);

      if (kDebugMode) debugPrint('‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');

      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ workouts
      try {
        await Supabase.instance.client
            .from('workouts')
            .update({'is_favorite': false})
            .eq('id', workout.id)
            .eq('user_id', userId);

        if (kDebugMode) debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ workouts');
      } catch (e) {
        if (kDebugMode) debugPrint('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã workouts: $e');
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      await workoutProvider.loadWorkouts();

      // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      final favorites = workoutProvider.getFavoriteWorkouts();
      if (kDebugMode)
        debugPrint(
            'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: ${favorites.length}');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Text('${workout.name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 2),
        ),
      );

      return true;
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: $e');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );

      return false;
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
  static Future<bool> toggleFavorite(
      BuildContext context, Workout workout) async {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ UI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    final isCurrentlyFavorite = workout.isFavorite;
    final localWorkoutProvider =
        Provider.of<WorkoutProvider>(context, listen: false);

    try {
      // 1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      final Workout localUpdatedWorkout = workout.toggleFavoriteStatus();

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
      if (isCurrentlyFavorite) {
        if (kDebugMode) debugPrint('üîÑ –õ–æ–∫–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...');
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ _customWorkouts –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        localWorkoutProvider.notifyListeners();
      } else {
        if (kDebugMode) debugPrint('üîÑ –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...');
        // –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ _customWorkouts
        localWorkoutProvider.notifyListeners();
      }

      // 2. –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (isCurrentlyFavorite) {
        await removeFromFavorites(context, workout);
      } else {
        await addToFavorites(context, workout);
      }

      // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      if (kDebugMode) debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
      await localWorkoutProvider.loadWorkouts();

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
      localWorkoutProvider.notifyListeners();

      if (kDebugMode) {
        final updatedFavorites = localWorkoutProvider.getFavoriteWorkouts();
        debugPrint(
            'üìä –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updatedFavorites.length}');
      }

      return true;
    } catch (e) {
      if (kDebugMode)
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: $e');

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );

      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Supabase
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  static Future<bool> verifyFavoriteStatus(String workoutId) async {
    try {
      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        if (kDebugMode) debugPrint('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return false;
      }

      if (kDebugMode)
        debugPrint(
            'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å ID: $workoutId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ favorite_workouts
      final existing = await Supabase.instance.client
          .from('favorite_workouts')
          .select('id')
          .eq('user_id', userId)
          .eq('workout_id', workoutId)
          .maybeSingle();

      final isFavorite = existing != null;

      if (kDebugMode) {
        if (isFavorite) {
          debugPrint('‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
        } else {
          debugPrint('‚ÑπÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
        }
      }

      return isFavorite;
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: $e');
      return false;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  static Future<void> syncFavorites(BuildContext context) async {
    try {
      final workoutProvider =
          Provider.of<WorkoutProvider>(context, listen: false);

      if (kDebugMode) debugPrint('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      await workoutProvider.loadWorkouts();

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      final favorites = workoutProvider.getFavoriteWorkouts();

      if (kDebugMode)
        debugPrint('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: ${favorites.length}');

      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      workoutProvider.notifyListeners();
    } catch (e) {
      if (kDebugMode)
        debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: $e');
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
  static Future<void> fixFavorites(BuildContext context) async {
    try {
      final scaffoldMessenger = ScaffoldMessenger.of(context);
      final workoutProvider =
          Provider.of<WorkoutProvider>(context, listen: false);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                strokeWidth: 2,
              ),
              const SizedBox(width: 16),
              Text('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...'),
            ],
          ),
          duration: const Duration(seconds: 2),
        ),
      );

      if (kDebugMode) debugPrint('üõ†Ô∏è –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');

      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // 1. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await Supabase.instance.client
          .from('favorite_workouts')
          .delete()
          .eq('user_id', userId);

      if (kDebugMode) debugPrint('‚úÖ –¢–∞–±–ª–∏—Ü–∞ favorite_workouts –æ—á–∏—â–µ–Ω–∞');

      // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–µ—Ç–∫–æ–π "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
      final favoriteWorkoutsFromProvider =
          workoutProvider.workouts.where((w) => w.isFavorite).toList();

      if (kDebugMode)
        debugPrint(
            'üìä –ù–∞–π–¥–µ–Ω–æ ${favoriteWorkoutsFromProvider.length} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ');

      // 3. –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∑–∞–Ω–æ–≤–æ –≤ —Ç–∞–±–ª–∏—Ü—É favorite_workouts
      for (final workout in favoriteWorkoutsFromProvider) {
        try {
          await Supabase.instance.client.from('favorite_workouts').insert({
            'user_id': userId,
            'workout_id': workout.id,
            'workout_name': workout.name,
            'workout_data': workout.copyWith(isFavorite: true).toJson(),
            'created_at': DateTime.now().toIso8601String(),
          });

          if (kDebugMode)
            debugPrint(
                '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${workout.name} (ID: ${workout.id})');
        } catch (e) {
          if (kDebugMode)
            debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ${workout.name}: $e');
        }
      }

      // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      await workoutProvider.loadWorkouts();

      if (kDebugMode)
        debugPrint(
            'üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö: ${workoutProvider.getFavoriteWorkouts().length}');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Text('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 2),
        ),
      );
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: $e');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  /// –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  static Future<void> discoverHiddenFavorites(BuildContext context) async {
    try {
      final scaffoldMessenger = ScaffoldMessenger.of(context);
      final workoutProvider =
          Provider.of<WorkoutProvider>(context, listen: false);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                strokeWidth: 2,
              ),
              const SizedBox(width: 16),
              Text('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...'),
            ],
          ),
          duration: const Duration(seconds: 2),
        ),
      );

      if (kDebugMode) debugPrint('üîç –ü–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');

      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ favorite_workouts
      final favoritesInDB = await Supabase.instance.client
          .from('favorite_workouts')
          .select('workout_id, workout_name, workout_data')
          .eq('user_id', userId);

      if (kDebugMode)
        debugPrint(
            'üìä –ù–∞–π–¥–µ–Ω–æ ${favoritesInDB.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ë–î favorite_workouts');

      if (favoritesInDB.isEmpty) {
        scaffoldMessenger.showSnackBar(
          SnackBar(
            content: Text('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –≤ –ë–î'),
            backgroundColor: Colors.orange,
            duration: const Duration(seconds: 2),
          ),
        );
        return;
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      final currentFavorites = workoutProvider.getFavoriteWorkouts();
      final currentFavoriteIds = currentFavorites.map((w) => w.id).toSet();

      if (kDebugMode)
        debugPrint(
            'üìä –¢–µ–∫—É—â–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ: ${currentFavorites.length}');

      // 3. –ù–∞—Ö–æ–¥–∏–º ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ—Ç –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
      final missingFavoriteItems = favoritesInDB
          .where((item) => !currentFavoriteIds.contains(item['workout_id']))
          .toList();

      if (kDebugMode)
        debugPrint(
            'üîç –ù–∞–π–¥–µ–Ω–æ ${missingFavoriteItems.length} —Å–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');

      if (missingFavoriteItems.isEmpty) {
        scaffoldMessenger.showSnackBar(
          SnackBar(
            content: Text('–°–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 2),
          ),
        );
        return;
      }

      // 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ä–∞–±–æ—á–∏–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      for (final item in missingFavoriteItems) {
        try {
          final workoutData = item['workout_data'] as Map<String, dynamic>;
          final workout = Workout.fromJson(workoutData);

          if (kDebugMode)
            debugPrint(
                '‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ${workout.name} (ID: ${workout.id})');

          // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É workouts
          await Supabase.instance.client.from('workouts').upsert({
            'id': workout.id,
            'user_id': userId,
            'name': workout.name,
            'description': workout.description,
            'difficulty': workout.difficulty,
            'equipment': workout.equipment,
            'target_muscles': workout.targetMuscles,
            'focus': workout.focus,
            'duration': workout.duration,
            'is_favorite': true,
            'created_at': DateTime.now().toIso8601String()
          });
        } catch (e) {
          if (kDebugMode) debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: $e');
        }
      }

      // 5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      await workoutProvider.loadWorkouts();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      final currentCount = workoutProvider.getFavoriteWorkouts().length;
      scaffoldMessenger.showSnackBar(
        SnackBar(
          content: Text(
              '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${missingFavoriteItems.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –¢–µ–ø–µ—Ä—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: $currentCount'),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 3),
        ),
      );
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: $e');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç
  static Future<void> createTestWorkout(BuildContext context) async {
    try {
      final scaffoldMessenger = ScaffoldMessenger.of(context);
      final workoutProvider =
          Provider.of<WorkoutProvider>(context, listen: false);

      if (kDebugMode) debugPrint('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');

      final userId = Supabase.instance.client.auth.currentUser?.id;
      if (userId == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (kDebugMode) debugPrint('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: $userId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      final existingCount = await Supabase.instance.client
          .from('workouts')
          .select('count')
          .eq('user_id', userId)
          .single();

      final count = existingCount['count'] as int? ?? 0;
      if (kDebugMode) debugPrint('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: $count');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      final workoutId = '${DateTime.now().millisecondsSinceEpoch}-test';
      if (kDebugMode) debugPrint('üÜî ID –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: $workoutId');

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
      final testWorkout = Workout(
        id: workoutId,
        name: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        exercises: [
          Exercise.basic(
            name: '–û—Ç–∂–∏–º–∞–Ω–∏—è',
            targetMuscleGroup: '–ì—Ä—É–¥—å',
            equipment: '–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            sets: '3',
            reps: '10',
            difficulty: '–°—Ä–µ–¥–Ω–∏–π',
          ),
          Exercise.basic(
            name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
            targetMuscleGroup: '–ù–æ–≥–∏',
            equipment: '–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
            sets: '3',
            reps: '15',
            difficulty: '–°—Ä–µ–¥–Ω–∏–π',
          ),
        ],
        duration: 20,
        difficulty: '–°—Ä–µ–¥–Ω–∏–π',
        equipment: ['–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'],
        targetMuscles: ['–ì—Ä—É–¥—å', '–ù–æ–≥–∏'],
        focus: '–û–±—â–µ–µ',
        isFavorite: true,
      );

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è workouts
      final workoutData = {
        'id': workoutId,
        'user_id': userId,
        'name': testWorkout.name,
        'description': testWorkout.description,
        'difficulty': testWorkout.difficulty,
        'equipment': testWorkout.equipment,
        'target_muscles': testWorkout.targetMuscles,
        'focus': testWorkout.focus,
        'duration': testWorkout.duration,
        'is_favorite': true,
        'exercises': testWorkout.exercises
            .map((e) => {
                  'name': e.name,
                  'targetMuscleGroup': e.targetMuscleGroup,
                  'equipment': e.equipment,
                  'sets': e.sets,
                  'reps': e.reps,
                  'difficulty': e.difficulty,
                })
            .toList(),
        'created_at': DateTime.now().toIso8601String()
      };

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è favorite_workouts
      final favoriteData = {
        'user_id': userId,
        'workout_id': workoutId,
        'workout_name': testWorkout.name,
        'workout_data': testWorkout.toJson(),
        'created_at': DateTime.now().toIso8601String(),
      };

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (kDebugMode) debugPrint('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');

      await Supabase.instance.client
          .from('favorite_workouts')
          .delete()
          .eq('user_id', userId)
          .like('workout_id', '%-test');

      await Supabase.instance.client
          .from('workouts')
          .delete()
          .eq('user_id', userId)
          .like('id', '%-test');

      if (kDebugMode) debugPrint('‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã');

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
      if (kDebugMode) debugPrint('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ workouts...');
      final workoutsResponse = await Supabase.instance.client
          .from('workouts')
          .insert(workoutData)
          .select();

      if (kDebugMode) debugPrint('üìù –û—Ç–≤–µ—Ç workouts: $workoutsResponse');

      if (kDebugMode) debugPrint('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ favorite_workouts...');
      final favoritesResponse = await Supabase.instance.client
          .from('favorite_workouts')
          .insert(favoriteData)
          .select();

      if (kDebugMode)
        debugPrint('üìù –û—Ç–≤–µ—Ç favorite_workouts: $favoritesResponse');

      if (kDebugMode) debugPrint('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await workoutProvider.loadWorkouts();
      workoutProvider.notifyListeners();

      // –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      final checkFavorites = await Supabase.instance.client
          .from('favorite_workouts')
          .select('count')
          .eq('user_id', userId)
          .single();

      final favoritesCount = checkFavorites['count'] as int? ?? 0;
      if (kDebugMode)
        debugPrint(
            'üìä –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: $favoritesCount');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å UI
      if (context.mounted) {
        scaffoldMessenger.showSnackBar(
          SnackBar(
            content: Text('–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ ($favoritesCount)'),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: $e');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å UI
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    }
  }
}
