// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef SUPERWALLKIT_SWIFT_H
#define SUPERWALLKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import SafariServices;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SuperwallKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// An Apple App Store product.
SWIFT_CLASS_NAMED("AppStoreProduct")
@interface SWKAppStoreProduct : NSObject
/// The product identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SWKVariant;

/// An assignment to a paywall or holdout variant for a given experiment.
SWIFT_CLASS_NAMED("Assignment")
@interface SWKConfirmedAssignment : NSObject
/// The id of the experiment.
@property (nonatomic, readonly, copy) NSString * _Nonnull experimentId;
/// Information about the experiment variant.
@property (nonatomic, readonly, strong) SWKVariant * _Nonnull variant;
/// A boolean that indicates whether the assignment has been posted back to the server.
@property (nonatomic, readonly) BOOL isSentToServer;
- (BOOL)isFullyEqualTo:(SWKConfirmedAssignment * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum SWKComputedPropertyRequestType : NSInteger;

/// A request to compute a device property associated with a placement at runtime.
SWIFT_CLASS_NAMED("ComputedPropertyRequest")
@interface SWKComputedPropertyRequest : NSObject
/// The type of device property to compute.
@property (nonatomic, readonly) enum SWKComputedPropertyRequestType type;
/// The name of the event used to compute the device property.
@property (nonatomic, readonly, copy) NSString * _Nonnull placementName;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of device property to compute.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKComputedPropertyRequestType, "ComputedPropertyRequestType", closed) {
/// The number of minutes since the placement occurred.
  SWKComputedPropertyRequestTypeMinutesSince = 0,
/// The number of hours since the placement occurred.
  SWKComputedPropertyRequestTypeHoursSince = 1,
/// The number of days since the placement occurred.
  SWKComputedPropertyRequestTypeDaysSince = 2,
/// The number of months since the placement occurred.
  SWKComputedPropertyRequestTypeMonthsSince = 3,
/// The number of years since the placement occurred.
  SWKComputedPropertyRequestTypeYearsSince = 4,
};

/// An enum representing the configuration status of the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKConfigurationStatus, "ConfigurationStatus", closed) {
/// The configuration process is not yet completed.
  SWKConfigurationStatusPending = 0,
/// The configuration process completed successfully.
  SWKConfigurationStatusConfigured = 1,
/// The configuration process failed.
  SWKConfigurationStatusFailed = 2,
};

enum SWKEntitlementType : NSInteger;

/// An entitlement that represents a subscription tier in your app.
SWIFT_CLASS_NAMED("Entitlement")
@interface SWKEntitlement : NSObject
/// The identifier for the entitlement.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The type of entitlement.
@property (nonatomic, readonly) enum SWKEntitlementType type;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An enum whose types specify the store which the product belongs to.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKEntitlementType, "EntitlementType", closed) {
/// An Apple App Store product.
  SWKEntitlementTypeServiceLevel = 0,
};


/// A class that handles the <code>Set</code> of <code>Entitlement</code> objects retrieved from
/// the Superwall dashboard.
SWIFT_CLASS_NAMED("EntitlementsInfo")
@interface SWKEntitlementsInfo : NSObject
/// All entitlements, regardless of whether they’re active or not.
@property (nonatomic, readonly, copy) NSSet<SWKEntitlement *> * _Nonnull all;
/// The inactive entitlements.
@property (nonatomic, readonly, copy) NSSet<SWKEntitlement *> * _Nonnull inactive;
/// The active entitlements.
@property (nonatomic, readonly, copy) NSSet<SWKEntitlement *> * _Nonnull active;
/// A <code>Set</code> of active <code>Entitlement</code> objects redeemed via the web.
@property (nonatomic, readonly, copy) NSSet<SWKEntitlement *> * _Nonnull web;
/// Returns a <code>Set</code> of <code>Entitlement</code>s belonging to a given <code>productId</code>.
/// \param productId A <code>String</code> representing a <code>productId</code>
///
///
/// returns:
/// A <code>Set</code> of <code>Entitlement</code>s
- (NSSet<SWKEntitlement *> * _Nonnull)byProductId:(NSString * _Nonnull)productId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A campaign experiment that was assigned to a user.
/// An experiment is part of a <a href="https://docs.superwall.com/docs/campaign-rules">Campaign Audience</a>
/// defined in the Superwall dashboard. When an audience is matched, the user is
/// assigned to an experiment, which is a set of paywall variants determined
/// by probabilities. An experiment will result in a user seeing a paywall unless
/// they are in a holdout group.
/// To learn more, read <a href="https://docs.superwall.com/docs/home#how-it-works">our docs</a>.
SWIFT_CLASS_NAMED("Experiment")
@interface SWKExperiment : NSObject
/// The id of the experiment.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The id of the experiment group.
@property (nonatomic, readonly, copy) NSString * _Nonnull groupId;
/// Information about the experiment variant.
@property (nonatomic, readonly, strong) SWKVariant * _Nonnull variant;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SWKVariantType : NSInteger;

SWIFT_CLASS_NAMED("Variant")
@interface SWKVariant : NSObject
/// The id of the experiment variant.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The type of variant: holdout or treatment.
@property (nonatomic, readonly) enum SWKVariantType type;
/// The identifier of the paywall variant. Only valid when the variant <code>type</code> is <code>treatment</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable paywallId;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SWKVariantType, "VariantType", closed) {
  SWKVariantTypeTreatment = 0,
  SWKVariantTypeHoldout = 1,
};


/// An enum whose cases indicate whether the <code>Superwall/register(placement:params:handler:feature:)</code>
/// <code>feature</code> block executes or not.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKFeatureGatingBehavior, "FeatureGatingBehavior", closed) {
/// Prevents the <code>Superwall/register(placement:params:handler:feature:)</code> <code>feature</code>
/// block from executing on dismiss of the paywall unless the user has an active subscription.
  SWKFeatureGatingBehaviorGated = 0,
/// Executes the <code>Superwall/register(placement:params:handler:feature:)</code> <code>feature</code>
/// block on dismiss of the paywall regardless of whether the user has an active subscription or not.
  SWKFeatureGatingBehaviorNonGated = 1,
};


@class SWKPaywallViewController;
enum SWKPaywallSkippedReason : NSInteger;

/// An object that represents the result of calling
/// <code>Superwall/getPaywall(forPlacement:params:paywallOverrides:delegate:completion:)</code>.
SWIFT_CLASS_NAMED("GetPaywallResultObjc")
@interface SWKGetPaywallResult : NSObject
/// The <code>PaywallViewController</code>.
@property (nonatomic, readonly, strong) SWKPaywallViewController * _Nullable paywall;
/// The reason that the paywall retrieval was intentionally skipped.
@property (nonatomic, readonly) enum SWKPaywallSkippedReason skippedReason;
/// Any errors that occurred when trying to retrieve the <code>PaywallViewController</code>.
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Options passed in when calling <code>Superwall/identify(userId:options:)</code>.
SWIFT_CLASS_NAMED("IdentityOptions")
@interface SWKIdentityOptions : NSObject
/// Determines whether the SDK should wait to restore paywall assignments from the server
/// before presenting any paywalls.
/// This should only be used in advanced use cases. By setting this to <code>true</code>, it prevents
/// paywalls from showing until after paywall assignments have been restored. If you expect
/// users of your app to switch accounts or delete/reinstall a lot, you’d set this when users log
/// in to an existing account.
@property (nonatomic, readonly) BOOL restorePaywallAssignments;
- (nonnull instancetype)initWithRestorePaywallAssignments:(BOOL)restorePaywallAssignments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SWKInterfaceStyle, "InterfaceStyle", closed) {
  SWKInterfaceStyleLight = 0,
  SWKInterfaceStyleDark = 1,
};

enum SWKLocalNotificationType : NSInteger;

/// A local notification.
SWIFT_CLASS_NAMED("LocalNotification")
@interface SWKLocalNotification : NSObject
/// The type of the notification.
@property (nonatomic, readonly) enum SWKLocalNotificationType type;
/// The title text of the notification.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The subtitle text of the notification.
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
/// The body text of the notification.
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// The delay to the notification in milliseconds.
@property (nonatomic, readonly) double delay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The type of notification.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKLocalNotificationType, "LocalNotificationType", closed) {
/// The notification will fire after a transaction.
  SWKLocalNotificationTypeTrialStarted = 0,
};

/// Specifies the detail of the logs returned from the SDK to the console.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKLogLevel, "LogLevel", closed) {
/// Prints all logs from the SDK to the console. Useful for debugging your app if something isn’t working as expected.
  SWKLogLevelDebug = 10,
/// Prints errors, warnings, and useful information from the SDK to the console.
  SWKLogLevelInfo = 20,
/// Prints errors and warnings from the SDK to the console.
  SWKLogLevelWarn = 30,
/// Only prints errors from the SDK to the console.
  SWKLogLevelError = 40,
/// Turns off all logs.
  SWKLogLevelNone = 99,
};

/// The possible scope of logs to print to the console.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKLogScope, "LogScope", closed) {
  SWKLogScopeLocalizationManager = 0,
  SWKLogScopeAnalytics = 1,
  SWKLogScopeBounceButton = 2,
  SWKLogScopeCoreData = 3,
  SWKLogScopeConfigManager = 4,
  SWKLogScopeIdentityManager = 5,
  SWKLogScopeDebugManager = 6,
  SWKLogScopeDebugViewController = 7,
  SWKLogScopeLocalizationViewController = 8,
  SWKLogScopeGameControllerManager = 9,
  SWKLogScopeDevice = 10,
  SWKLogScopeNetwork = 11,
  SWKLogScopePaywallEvents = 12,
  SWKLogScopeProductsManager = 13,
  SWKLogScopeStoreKitManager = 14,
  SWKLogScopePlacements = 15,
  SWKLogScopeReceipts = 16,
  SWKLogScopeSuperwallCore = 17,
  SWKLogScopePaywallPresentation = 18,
  SWKLogScopeTransactions = 19,
  SWKLogScopePaywallViewController = 20,
  SWKLogScopeCache = 21,
  SWKLogScopeWebEntitlements = 22,
  SWKLogScopeAll = 23,
};




/// An enum whose cases indicate whether the paywall was closed by user
/// interaction or because another paywall will show.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPaywallCloseReason, "PaywallCloseReason", closed) {
/// The paywall was closed by system logic, either after a purchase or because
/// a deeplink was presented.
  SWKPaywallCloseReasonSystemLogic = 0,
/// The paywall was automatically closed because another paywall will show.
/// This prevents <code>Superwall/register(placement:params:handler:feature:)</code> <code>feature</code>
/// block from executing on dismiss of the paywall, because another paywall is set to show
  SWKPaywallCloseReasonForNextPaywall = 1,
/// The paywall was closed because the webview couldn’t be loaded.
/// If this happens for a gated paywall, the <code>PaywallPresentationHandler/onError(_:)</code>
/// handler will be called. If it’s for a non-gated paywall, the feature block will be called.
  SWKPaywallCloseReasonWebViewFailedToLoad = 2,
/// The paywall was closed because the user tapped the close button or dragged to dismiss.
  SWKPaywallCloseReasonManualClose = 3,
/// The paywall hasn’t been closed yet.
  SWKPaywallCloseReasonNone = 4,
};

@class SWKProduct;
@class NSURL;
@class SWKSurvey;
@class SWKPaywallPresentationInfo;

/// Contains information about a paywall.
SWIFT_CLASS_NAMED("PaywallInfo")
@interface SWKPaywallInfo : NSObject
/// The identifier set for this paywall in the Superwall dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The cache key for the paywall.
@property (nonatomic, readonly, copy) NSString * _Nonnull cacheKey;
/// The build ID of the Superwall configuration.
@property (nonatomic, readonly, copy) NSString * _Nonnull buildId;
/// The trigger experiment that caused the paywall to present.
/// An experiment is a set of paywall variants determined by probabilities. An experiment will result in a user seeing a paywall unless they are in a holdout group.
@property (nonatomic, readonly, strong) SWKExperiment * _Nullable experiment;
/// An array of products associated with the paywall.
@property (nonatomic, readonly, copy) NSArray<SWKProduct *> * _Nonnull products;
/// An ordered array of product IDs that this paywall is displaying.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull productIds;
/// The name set for this paywall in Superwall’s web dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL where this paywall is hosted.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The name of the placement that triggered this Paywall. Defaults to <code>nil</code> if <code>triggeredByPlacement</code> is false.
@property (nonatomic, readonly, copy) NSString * _Nullable presentedByPlacementWithName;
/// The Superwall internal id (for debugging) of the placement that triggered this Paywall. Defaults to <code>nil</code> if <code>triggeredByPlacement</code> is false.
@property (nonatomic, readonly, copy) NSString * _Nullable presentedByPlacementWithId;
/// The ISO date string describing when the placement triggered this paywall. Defaults to <code>nil</code> if <code>triggeredByPlacement</code> is false.
@property (nonatomic, readonly, copy) NSString * _Nullable presentedByPlacementAt;
/// How the paywall was presented, either ‘programmatically’, ‘identifier’, or ‘placement’
@property (nonatomic, readonly, copy) NSString * _Nonnull presentedBy;
/// The source function that retrieved the paywall. Either <code>implicit</code>, <code>getPaywall</code>, or <code>register</code>. <code>nil</code> only when preloading.
@property (nonatomic, readonly, copy) NSString * _Nullable presentationSourceType;
/// An iso date string indicating when the paywall response began loading.
@property (nonatomic, readonly, copy) NSString * _Nullable responseLoadStartTime;
/// An iso date string indicating when the paywall response finished loading.
@property (nonatomic, readonly, copy) NSString * _Nullable responseLoadCompleteTime;
/// An iso date string indicating when the paywall response failed to load.
@property (nonatomic, readonly, copy) NSString * _Nullable responseLoadFailTime;
/// An iso date string indicating when the paywall webview began loading.
@property (nonatomic, readonly, copy) NSString * _Nullable webViewLoadStartTime;
/// An iso date string indicating when the paywall webview finished loading.
@property (nonatomic, readonly, copy) NSString * _Nullable webViewLoadCompleteTime;
/// An iso date string indicating when the paywall webview failed to load.
@property (nonatomic, readonly, copy) NSString * _Nullable webViewLoadFailTime;
/// An iso date string indicating when the paywall products began loading.
@property (nonatomic, readonly, copy) NSString * _Nullable productsLoadStartTime;
/// An iso date string indicating when the paywall products finished loading.
@property (nonatomic, readonly, copy) NSString * _Nullable productsLoadCompleteTime;
/// An iso date string indicating when the paywall products failed to load.
@property (nonatomic, readonly, copy) NSString * _Nullable productsLoadFailTime;
/// An iso date string indicating when the shimmer view began loading.
@property (nonatomic, readonly, copy) NSString * _Nullable shimmerLoadStartTime;
/// An iso date string indicating when the shimmer view finished loading.
@property (nonatomic, readonly, copy) NSString * _Nullable shimmerLoadCompleteTime;
/// The paywall.js version installed on the paywall website.
@property (nonatomic, readonly, copy) NSString * _Nullable paywalljsVersion;
/// Indicates whether the paywall is showing free trial content.
@property (nonatomic, readonly) BOOL isFreeTrialAvailable;
/// A <code>FeatureGatingBehavior</code> case that indicates whether the
/// <code>Superwall/register(placement:params:handler:feature:)</code>
/// <code>feature</code> block executes or not.
@property (nonatomic, readonly) enum SWKFeatureGatingBehavior featureGatingBehavior;
/// An enum describing why this paywall was last closed. <code>none</code> if not yet closed.
@property (nonatomic, readonly) enum SWKPaywallCloseReason closeReason;
/// The local notifications associated with the paywall.
@property (nonatomic, readonly, copy) NSArray<SWKLocalNotification *> * _Nonnull localNotifications;
/// An array of requests to compute a device property associated with an placement at runtime.
@property (nonatomic, readonly, copy) NSArray<SWKComputedPropertyRequest *> * _Nonnull computedPropertyRequests;
/// Surveys attached to a paywall.
@property (nonatomic, readonly, copy) NSArray<SWKSurvey *> * _Nonnull surveys;
/// Information about the presentation of the paywall.
@property (nonatomic, readonly, strong) SWKPaywallPresentationInfo * _Nonnull presentation;
/// Indicates whether scrolling of the webview is enabled.
@property (nonatomic, readonly) BOOL isScrollEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains the possible loading states of a paywall.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPaywallLoadingState, "PaywallLoadingState", closed) {
/// The initial state of the paywall
  SWKPaywallLoadingStateUnknown = 0,
/// When a purchase is loading
  SWKPaywallLoadingStateLoadingPurchase = 1,
/// When the paywall URL is loading
  SWKPaywallLoadingStateLoadingURL = 2,
/// When the user has manually shown the spinner
  SWKPaywallLoadingStateManualLoading = 3,
/// When everything has loaded.
  SWKPaywallLoadingStateReady = 4,
};

@class SWKRestoreFailed;
@class SWKNotificationPermissionsDenied;
enum SWKTransactionBackgroundView : NSInteger;

/// Options for configuring the appearance and behavior of paywalls.
SWIFT_CLASS_NAMED("PaywallOptions")
@interface SWKPaywallOptions : NSObject
/// Determines whether the paywall should use haptic feedback. Defaults to true.
/// Haptic feedback occurs when a user purchases or restores a product, opens a URL
/// from the paywall, or closes the paywall.
@property (nonatomic) BOOL isHapticFeedbackEnabled;
/// Defines the messaging of the alert presented to the user when restoring a transaction fails.
@property (nonatomic, strong) SWKRestoreFailed * _Nonnull restoreFailed;
/// Shows an alert asking the user if they’d like to try to restore on the web, if you have added web checkout on the
/// Superwall dashboard. Defaults to <code>true</code>.
@property (nonatomic) BOOL shouldShowWebRestorationAlert;
/// Defines the messaging of the alert presented to the user when notification permissions are denied.
@property (nonatomic, strong) SWKNotificationPermissionsDenied * _Nullable notificationPermissionsDenied;
/// Shows an alert after a purchase fails. Defaults to <code>true</code>.
/// Set this to <code>false</code> if you’re using a <code>PurchaseController</code> and want to show
/// your own alert after the purchase fails.
@property (nonatomic) BOOL shouldShowPurchaseFailureAlert;
/// Pre-loads and caches trigger paywalls and products when you initialize the SDK via <code>Superwall/configure(apiKey:purchaseController:options:completion:)-52tke</code>. Defaults to <code>true</code>.
/// Set this to <code>false</code> to load and cache paywalls and products in a just-in-time fashion.
/// If you want to preload them at a later date, you can call <code>Superwall/preloadAllPaywalls()</code>
/// or <code>Superwall/preloadPaywalls(forPlacements:)</code>
@property (nonatomic) BOOL shouldPreload;
/// Automatically dismisses the paywall when a product is purchased or restored. Defaults to <code>true</code>.
/// Set this to <code>false</code> to prevent the paywall from dismissing on purchase/restore.
@property (nonatomic) BOOL automaticallyDismiss;
/// The view that appears behind Apple’s payment sheet during a transaction. Defaults to <code>.spinner</code>.
/// Set this to <code>.none</code> to remove the background view during a transaction.
/// <em>Note:</em> This feature is still in development and could change.
@property (nonatomic) enum SWKTransactionBackgroundView transactionBackgroundView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the messaging of the alert presented to the user when restoring a transaction fails.
SWIFT_CLASS_NAMED("RestoreFailed")
@interface SWKRestoreFailed : NSObject
/// The title of the alert presented to the user when restoring a transaction fails. Defaults to
/// <code>No Subscription Found</code>.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Defines the message of the alert presented to the user when restoring a transaction fails.
/// Defaults to <code>We couldn't find an active subscription for your account.</code>
@property (nonatomic, copy) NSString * _Nonnull message;
/// Defines the title of the close button in the alert presented to the user when restoring a
/// transaction fails. Defaults to <code>Okay</code>.
@property (nonatomic, copy) NSString * _Nonnull closeButtonTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NotificationPermissionsDenied")
@interface SWKNotificationPermissionsDenied : NSObject
/// The title of the alert presented to the user when notification permissions are denied. Defaults to
/// <code>Notification Permissions Denied</code>.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Defines the message of the alert presented to the user when notification permissions are denied.
/// Defaults to <code>Please enable notification permissions from the Settings app so we can notify you when your free trial ends.</code>
@property (nonatomic, copy) NSString * _Nonnull message;
/// Defines the title of the action button in the alert presented to the user when notification permissions are denied. Defaults to <code>Open Settings</code>.
@property (nonatomic, copy) NSString * _Nonnull actionButtonTitle;
/// Defines the title of the close button in the alert presented to the user when notification permissions are denied. Defaults to <code>Not now</code>.
@property (nonatomic, copy) NSString * _Nonnull closeButtonTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines the different types of views that can appear behind Apple’s payment sheet during a transaction.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKTransactionBackgroundView, "TransactionBackgroundView", closed) {
/// This shows your paywall background color overlayed with an activity indicator.
  SWKTransactionBackgroundViewSpinner = 0,
/// Removes the background view during a transaction.
  SWKTransactionBackgroundViewNone = 1,
};

@class SWKStoreProduct;
enum SWKPaywallPresentationStyle : NSInteger;

/// Override the default behavior and products of a paywall.
/// Provide an instance of this to <code>Superwall/getPaywall(forPlacement:params:paywallOverrides:delegate:)</code>.
SWIFT_CLASS_NAMED("PaywallOverrides")
@interface SWKPaywallOverrides : NSObject
/// Defines the products to override on the paywall by product name.
/// You can override one or more products of your choosing. For example, this is how you would override the first and third product on the paywall:
/// \code
///  PaywallOverrides(
///    products: [
///      "primary": firstProduct,
///      "tertiary": thirdProduct
///    ]
///  )
///
/// \endcodeThis assumes that your products have the names “primary” and “tertiary” in the Paywall Editor.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, SWKStoreProduct *> * _Nonnull productsByName;
/// Sets a custom presentation style for the paywall.
@property (nonatomic, readonly) enum SWKPaywallPresentationStyle presentationStyle;
/// Override the default behavior and products of a paywall.
/// You can override one or more products of your choosing. For example, this is how you would override the first and third product on the paywall:
/// \code
///  PaywallOverrides(
///    products: [
///      "primary": firstProduct,
///      "tertiary": thirdProduct
///    ]
///  )
///
/// \endcodeThis assumes that your products have the names “primary” and “tertiary” in the Paywall Editor.
/// Provide an instance of this to <code>Superwall/getPaywall(forPlacement:params:paywallOverrides:delegate:)</code>.
/// \param productsByName A dictionary mapping the name of the product to override on the paywall with a <code>StoreProduct</code>.
///
/// \param presentationStyleOverride A <code>PaywallPresentationStyle</code> enum that specifies the presentation style for the paywall.
///
- (nonnull instancetype)initWithProductsByName:(NSDictionary<NSString *, SWKStoreProduct *> * _Nonnull)productsByName presentationStyleOverride:(enum SWKPaywallPresentationStyle)presentationStyleOverride OBJC_DESIGNATED_INITIALIZER;
/// Override the default behavior and products of a paywall.
/// You can override one or more products of your choosing. For example, this is how you would override the first and third product on the paywall:
/// \code
///  PaywallOverrides(
///    products: [
///      "primary": firstProduct,
///      "tertiary": thirdProduct
///    ]
///  )
///
/// \endcodeThis assumes that your products have the names “primary” and “tertiary” in the Paywall Editor.
/// Provide an instance of this to <code>Superwall/getPaywall(forPlacement:params:paywallOverrides:delegate:)</code>.
/// \param productsByName A dictionary mapping the name of the product to override on the paywall with a <code>StoreProduct</code>.
///
- (nonnull instancetype)initWithProductsByName:(NSDictionary<NSString *, SWKStoreProduct *> * _Nonnull)productsByName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SWKPaywallResult : NSInteger;

/// The handler for <code>Superwall/register(placement:params:handler:feature:)</code> whose
/// functions provide status updates for a paywall.
SWIFT_CLASS_NAMED("PaywallPresentationHandler")
@interface SWKPaywallPresentationHandler : NSObject
/// Sets the handler that will be called when the paywall did present.
/// \param handler A block that accepts a <code>PaywallInfo</code> object associated with
/// the presented paywall.
///
- (void)onPresent:(void (^ _Nonnull)(SWKPaywallInfo * _Nonnull))handler;
/// Sets the handler that will be called when a paywall is skipped, but no error has occurred.
/// \param handler A block that accepts a <code>PaywallSkippedReasonObjc</code> indicating why the paywall
/// was skipped.
///
- (void)onDismiss:(void (^ _Nonnull)(SWKPaywallInfo * _Nonnull, enum SWKPaywallResult, SWKStoreProduct * _Nullable))handler;
/// Sets the handler that will be called when an error occurred while trying to present a paywall.
/// \param handler A block that accepts an <code>Error</code> indicating why the paywall
/// could not present.
///
- (void)onError:(void (^ _Nonnull)(NSError * _Nonnull))handler;
/// Sets the handler that will be called when a paywall is skipped, but no error has occurred.
/// \param handler A block that accepts a <code>PaywallSkippedReasonObjc</code> indicating why the paywall
/// was skipped.
///
- (void)onSkip:(void (^ _Nonnull)(enum SWKPaywallSkippedReason))handler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Information about the presentation of the paywall.
SWIFT_CLASS_NAMED("PaywallPresentationInfo")
@interface SWKPaywallPresentationInfo : NSObject
/// The presentation style of the paywall.
@property (nonatomic, readonly) enum SWKPaywallPresentationStyle style;
/// The delay in milliseconds before switching from the loading view to
/// the paywall view.
@property (nonatomic, readonly) NSInteger delay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Used to override the presentation style of the paywall set on the dashboard.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPaywallPresentationStyle, "PaywallPresentationStyle", closed) {
/// A view presentation style that uses the modal presentation style <code>.pageSheet</code>.
  SWKPaywallPresentationStyleModal = 0,
/// A view presentation style in which the presented paywall slides up to cover the screen.
  SWKPaywallPresentationStyleFullscreen = 1,
/// A view presentation style in which the presented paywall covers the screen without animation.
  SWKPaywallPresentationStyleFullscreenNoAnimation = 2,
/// A view presentation style in which the presented paywall pushes on screen, as if pushed on to a navigation stack.
  SWKPaywallPresentationStylePush = 3,
/// A view presentation style in which the presented paywall slides up to cover 62% of the screen.
  SWKPaywallPresentationStyleDrawer = 4,
/// Indicates that the presentation style to be used is the one set on the dashboard.
  SWKPaywallPresentationStyleNone = 5,
};


/// Defines primary, secondary and tertiary products to be used on the paywall.
/// Pass an instance of this to <code>PaywallOverrides/products</code> to replace your remotely defined products.
SWIFT_CLASS_NAMED("PaywallProducts") SWIFT_DEPRECATED_MSG("When overriding paywall products, pass a dictionary to productsByName in the PaywallOverrides object instead")
@interface SWKPaywallProducts : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Define one or more products to be substituted into the paywall.
/// \param primary The primary product for the paywall.
///
/// \param secondary The secondary product for the paywall.
///
/// \param tertiary The tertiary product for the paywall.
///
- (nonnull instancetype)initWithPrimary:(SWKStoreProduct * _Nullable)primary secondary:(SWKStoreProduct * _Nullable)secondary tertiary:(SWKStoreProduct * _Nullable)tertiary OBJC_DESIGNATED_INITIALIZER;
@end

/// Objective-C-only enum. Contains the possible reasons for the dismissal of a paywall.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPaywallResult, "PaywallResultObjc", closed) {
/// The paywall was dismissed because the user purchased a product
  SWKPaywallResultPurchased = 0,
/// The paywall was declined by the user pressing the close button.
  SWKPaywallResultDeclined = 1,
/// The paywall was dismissed due to the user restoring their purchases.
  SWKPaywallResultRestored = 2,
};

/// Objective-C-only enum. Specifies the reason the paywall presentation was skipped.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPaywallSkippedReason, "PaywallSkippedReasonObjc", closed) {
/// The user was assigned to a holdout group.
  SWKPaywallSkippedReasonHoldout = 0,
/// No audience was matched for this placement.
  SWKPaywallSkippedReasonNoAudienceMatch = 1,
/// This placement was not found on the dashboard.
/// Please make sure you have added the placement to a campaign on the dashboard and
/// double check its spelling.
  SWKPaywallSkippedReasonPlacementNotFound = 2,
/// The presentation wasn’t skipped.
  SWKPaywallSkippedReasonNone = 3,
};
static NSString * _Nonnull const SWKPaywallSkippedReasonDomain = @"SuperwallKit.PaywallSkippedReasonObjc";

@class NSCoder;
@class NSBundle;

SWIFT_CLASS_NAMED("PaywallViewController")
@interface SWKPaywallViewController : UIViewController
/// Defines whether the presentation should animate based on the presentation style.
@property (nonatomic, readonly) BOOL presentationIsAnimated;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// The paywall info
@property (nonatomic, readonly, strong) SWKPaywallInfo * _Nonnull info;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIPresentationController;

@interface SWKPaywallViewController (SWIFT_EXTENSION(SuperwallKit)) <UIAdaptivePresentationControllerDelegate>
- (void)presentationControllerDidAttemptToDismiss:(UIPresentationController * _Nonnull)presentationController;
@end

@class SFSafariViewController;

@interface SWKPaywallViewController (SWIFT_EXTENSION(SuperwallKit)) <SFSafariViewControllerDelegate>
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
@end





@interface SWKPaywallViewController (SWIFT_EXTENSION(SuperwallKit))
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
@end


/// Objective-C-only interface for responding to user interactions with a <code>PaywallViewController</code> that
/// has been retrieved using
/// <code>Superwall/getPaywall(forPlacement:params:paywallOverrides:delegate:completion:)-5vtpb</code>.
SWIFT_PROTOCOL_NAMED("PaywallViewControllerDelegateObjc")
@protocol SWKPaywallViewControllerDelegate
/// Tells the delegate that the user finished interacting with the paywall and whether the delegate
/// should dismiss the paywall.
/// You should always check the <code>shouldDismiss</code> parameter to decide what to do when this method
/// is called. If <code>shouldDismiss</code> is <code>true</code>, make sure to dismiss the paywall.
/// \param paywall The <code>PaywallViewController</code> that the user is interacting with.
///
/// \param result A <code>PaywallResultObjc</code> enum that contains the reason for the dismissal of
/// the <code>PaywallViewController</code>.
///
/// \param shouldDismiss A <code>boolean</code> indicating whether the delegate should dismiss the paywall.
///
- (void)paywall:(SWKPaywallViewController * _Nonnull)paywall didFinishWithResult:(enum SWKPaywallResult)result shouldDismiss:(BOOL)shouldDismiss;
/// Tells the delegate that the loading state of the paywall did change.
/// \param paywall The <code>PaywallViewController</code> that the user is interacting with.
///
/// \param loadingState A <code>PaywallLoadingState</code> enum that contains the loading state of
/// the <code>PaywallViewController</code>.
///
- (void)paywall:(SWKPaywallViewController * _Nonnull)paywall loadingStateDidChange:(enum SWKPaywallLoadingState)loadingState;
@end

enum SWKPresentationValue : NSInteger;

/// Information about the result of tracking a placement.
SWIFT_CLASS_NAMED("PresentationResultObjc")
@interface SWKPresentationResult : NSObject
/// The result of registering a placement.
@property (nonatomic, readonly) enum SWKPresentationValue value;
/// A campaign experiment that was assigned to a user.
/// This is non-<code>nil</code> when the <code>result</code> is a <code>holdout</code> or
/// a <code>paywall</code>.
@property (nonatomic, readonly, strong) SWKExperiment * _Nullable experiment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The result of tracking a placement.
/// Contains the possible cases resulting from tracking a placement.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPresentationValue, "PresentationValueObjc", closed) {
/// This placement was not found on the dashboard.
/// Please make sure you have added the placement to a campaign on the dashboard and
/// double check its spelling.
  SWKPresentationValuePlacementNotFound = 0,
/// No matching audience was found for this placement so no paywall will be shown.
  SWKPresentationValueNoAudienceMatch = 1,
/// A matching audience was found and this user will be shown a paywall.
  SWKPresentationValuePaywall = 2,
/// A matching audience was found and this user was assigned to a holdout group so will not be shown a paywall.
  SWKPresentationValueHoldout = 3,
/// No view controller could be found to present on.
  SWKPresentationValuePaywallNotAvailable = 4,
/// The user is subscribed.
/// This means <code>Superwall/subscriptionStatus</code> is set to <code>.active</code>. If you’re
/// letting Superwall handle subscription-related logic, it will be based on the on-device
/// receipts. Otherwise it’ll be based on the value you’ve set.
/// By default, paywalls do not show to users who are already subscribed. You can override this
/// behavior in the paywall editor.
  SWKPresentationValueUserIsSubscribed = 5,
};

@class SWKStoreProductAdapter;

/// The product in the paywall.
SWIFT_CLASS_NAMED("Product")
@interface SWKProduct : NSObject
/// The name of the product in the editor.
/// This is optional because products can also be decoded from outside
/// of a paywall.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Convenience variable that accesses the product’s identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The entitlement associated with the product.
@property (nonatomic, readonly, copy) NSSet<SWKEntitlement *> * _Nonnull entitlements;
/// The objc-only type of product.
@property (nonatomic, readonly, strong) SWKStoreProductAdapter * _Nonnull adapter;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12SuperwallKit11ProductInfo") SWIFT_UNAVAILABLE_MSG("'ProductInfo' has been renamed to 'SWKProduct'")
@interface ProductInfo : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An enum whose types specify the store which the product belongs to.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKProductStore, "ProductStore", closed) {
/// An Apple App Store product.
  SWKProductStoreAppStore = 0,
};

enum SWKPurchaseResult : NSInteger;
enum SWKRestorationResult : NSInteger;

/// The Objective-C-only protocol that handles Superwall’s subscription-related logic.
/// By default, the Superwall SDK handles all subscription-related logic. However, if you’d like
/// more control, you can return a <code>PurchaseControllerObjc</code> when configuring the SDK via
/// <code>Superwall/configure(apiKey:purchaseController:options:completion:)-52tke</code>.
/// When implementing this, you also need to set the <code>Superwall/subscriptionStatus</code> using
/// <code>Superwall.shared.subscriptionStatus</code>.
/// To learn how to implement the <code>PurchaseControllerObjc</code> in your app
/// and best practices, see <a href="https://docs.superwall.com/docs/advanced-configuration">Purchases and Subscription Status</a>.
SWIFT_PROTOCOL_NAMED("PurchaseControllerObjc")
@protocol SWKPurchaseController
/// Called when the user initiates purchasing of a product.
/// Add your purchase logic here and call the completion block with the result. You can use Apple’s StoreKit APIs,
/// or if you use RevenueCat, you can call <a href="https://revenuecat.github.io/purchases-ios-docs/4.13.4/documentation/revenuecat/purchases/purchase(product:completion:)"><code>Purchases.shared.purchase(product:)</code></a>.
/// \param product The <code>SKProduct</code> the user would like to purchase.
///
/// \param completion A completion block the accepts a <code>PurchaseResult</code> object and an optional <code>Error</code>.
/// Call this with the result of your purchase logic. When you pass a <code>.failed</code> result, make sure you also pass
/// the error.
/// <em>Note:</em> Make sure you handle all cases of <code>PurchaseResult</code>.
///
- (void)purchaseWithProduct:(SWKStoreProduct * _Nonnull)product completion:(void (^ _Nonnull)(enum SWKPurchaseResult, NSError * _Nullable))completion;
/// Called when the user initiates a restore.
/// Add your restore logic here, making sure that the user’s subscriptionStatus is updated after restore,
/// then call the completion block.
/// \param completion A completion block that accepts two objects. 1. A <code>RestorationResultObjc</code> that’s <code>.restored</code> if the user’s purchases were restored or <code>.failed</code> if they weren’t. 2. An optional error that you can return when the restore failed.
/// <em>Note</em>: <code>restored</code> does not imply the user has an active subscription, it just mean the restore had no errors.
///
- (void)restorePurchasesWithCompletion:(void (^ _Nonnull)(enum SWKRestorationResult, NSError * _Nullable))completion;
@end

/// An Objective-C-only enum that defines the possible outcomes of attempting to purchase a product.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPurchaseResult, "PurchaseResultObjc", closed) {
/// The purchase was cancelled.
/// In StoreKit 1, you can detect this by switching over the error code from the <code>.failed</code>
/// transaction state. The following cases should all be reported as a <code>.cancelled</code> state to
/// Superwall:
/// <ul>
///   <li>
///     <code>.overlayCancelled</code>,
///   </li>
///   <li>
///     <code>.paymentCancelled</code>,
///   </li>
///   <li>
///     <code>.overlayTimeout</code>
///   </li>
/// </ul>
/// With RevenueCat, this is when the <code>userCancelled</code> boolean returned from the purchase
/// method is <code>true</code>.
  SWKPurchaseResultCancelled = 0,
/// The product was purchased.
  SWKPurchaseResultPurchased = 1,
/// The purchase is pending and requires action from the developer.
/// In StoreKit 1, this is the same as the <code>.deferred</code> transaction state.
/// With RevenueCat, this is the same as the <code>.paymentPendingError</code>.
  SWKPurchaseResultPending = 2,
/// The purchase failed for a reason other than the user cancelling or the payment pending.
/// Send the <code>Error</code> back in the <code>PurchaseControllerObjc/purchase(product:completion:)</code>
/// completion block to Superwall to alert the user.
  SWKPurchaseResultFailed = 3,
};

enum SWKRedemptionResultType : NSInteger;
@class SWKRedemptionInfo;
@class SWKErrorInfo;
@class SWKExpiredCodeInfo;

/// @objc‑compatible version of RedemptionResult.
SWIFT_CLASS_NAMED("RedemptionResultObjc")
@interface SWKRedemptionResult : NSObject
/// The code that was redeemed.
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
/// The type of redemption result.
@property (nonatomic, readonly) enum SWKRedemptionResultType type;
/// Information about a redemption.
/// This is non-nil when the <code>type</code> is <code>success</code> or <code>expiredSubscription</code>.
@property (nonatomic, readonly, strong) SWKRedemptionInfo * _Nullable redemptionInfo;
/// Information about an error during redemption.
/// This is non-nil when the <code>type</code> is <code>error</code>.
@property (nonatomic, readonly, strong) SWKErrorInfo * _Nullable errorInfo;
/// Information about an expired code.
/// This is non-nil when the <code>type</code> is <code>codeExpired</code>
@property (nonatomic, readonly, strong) SWKExpiredCodeInfo * _Nullable expiredInfo;
/// Designated initializer.
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code type:(enum SWKRedemptionResultType)type redemptionInfo:(SWKRedemptionInfo * _Nullable)redemptionInfo errorInfo:(SWKErrorInfo * _Nullable)errorInfo expiredInfo:(SWKExpiredCodeInfo * _Nullable)expiredInfo OBJC_DESIGNATED_INITIALIZER;
/// Convenience variable to get the stripe subscription IDs.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable stripeSubscriptionIds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The error info.
SWIFT_CLASS_NAMED("ErrorInfo")
@interface SWKErrorInfo : NSObject
/// The message of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Info about the expired code.
SWIFT_CLASS_NAMED("ExpiredCodeInfo")
@interface SWKExpiredCodeInfo : NSObject
/// A boolean indicating whether the redemption email has been resent.
@property (nonatomic, readonly) BOOL resent;
/// An optional String indicating the obfuscated email address that the redemption
/// email was sent to.
@property (nonatomic, readonly, copy) NSString * _Nullable obfuscatedEmail;
- (nonnull instancetype)initWithResent:(BOOL)resent obfuscatedEmail:(NSString * _Nullable)obfuscatedEmail OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SWKOwnership;
@class SWKPurchaserInfo;
@class SWKRedemptionPaywallInfo;

/// Information about the redemption.
SWIFT_CLASS_NAMED("RedemptionInfo")
@interface SWKRedemptionInfo : NSObject
/// The ownership of the code.
@property (nonatomic, readonly, strong) SWKOwnership * _Nonnull ownership;
/// Info about the purchaser.
@property (nonatomic, readonly, strong) SWKPurchaserInfo * _Nonnull purchaserInfo;
/// Info about the paywall the purchase was made from.
@property (nonatomic, readonly, strong) SWKRedemptionPaywallInfo * _Nullable paywallInfo;
/// The entitlements array.
@property (nonatomic, readonly, copy) NSSet<SWKEntitlement *> * _Nonnull entitlements;
- (nonnull instancetype)initWithOwnership:(SWKOwnership * _Nonnull)ownership purchaserInfo:(SWKPurchaserInfo * _Nonnull)purchaserInfo paywallInfo:(SWKRedemptionPaywallInfo * _Nullable)paywallInfo entitlements:(NSSet<SWKEntitlement *> * _Nonnull)entitlements OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum specifying code ownership.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKOwnershipType, "OwnershipType", closed) {
  SWKOwnershipTypeAppUser = 0,
  SWKOwnershipTypeDevice = 1,
};


/// Represents code ownership.
SWIFT_CLASS_NAMED("Ownership")
@interface SWKOwnership : NSObject
/// The type of ownership.
@property (nonatomic, readonly) enum SWKOwnershipType type;
/// The identifier of the owner (appUserId or deviceId).
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The code belongs to the identified user.
- (nonnull instancetype)initWithAppUserId:(NSString * _Nonnull)appUserId OBJC_DESIGNATED_INITIALIZER;
/// The code belongs to the device.
- (nonnull instancetype)initWithDeviceId:(NSString * _Nonnull)deviceId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SWKStoreIdentifiers;

/// Info about the purchaser.
SWIFT_CLASS_NAMED("PurchaserInfo")
@interface SWKPurchaserInfo : NSObject
/// The app user ID of the purchaser.
@property (nonatomic, readonly, copy) NSString * _Nonnull appUserId;
/// The email address of the purchaser.
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// The identifiers of the store that was purchased from.
@property (nonatomic, readonly, strong) SWKStoreIdentifiers * _Nonnull storeIdentifiers;
- (nonnull instancetype)initWithAppUserId:(NSString * _Nonnull)appUserId email:(NSString * _Nullable)email storeIdentifiers:(SWKStoreIdentifiers * _Nonnull)storeIdentifiers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Identifiers of the store that was purchased from.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKStoreIdentifierType, "StoreIdentifierType", closed) {
  SWKStoreIdentifierTypeStripe = 0,
  SWKStoreIdentifierTypeUnknown = 1,
};


/// Represents store identifiers.
SWIFT_CLASS_NAMED("StoreIdentifiers")
@interface SWKStoreIdentifiers : NSObject
/// The type of store identifier.
@property (nonatomic, readonly) enum SWKStoreIdentifierType type;
/// The customer ID if purchased via Stripe.
@property (nonatomic, readonly, copy) NSString * _Nullable customerId;
/// The subscription IDs if purchased via Stripe.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable subscriptionIds;
/// The store name if unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable store;
/// Additional info for an unknown store.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable additionalInfo;
/// Initializer for Stripe store identifiers.
- (nonnull instancetype)initWithStripeWithCustomerId:(NSString * _Nonnull)customerId subscriptionIds:(NSArray<NSString *> * _Nonnull)subscriptionIds OBJC_DESIGNATED_INITIALIZER;
/// Initializer for unknown store identifiers.
- (nonnull instancetype)initWithUnknownStore:(NSString * _Nonnull)store additionalInfo:(NSDictionary<NSString *, id> * _Nonnull)additionalInfo OBJC_DESIGNATED_INITIALIZER;
/// Convenience variable to get the stripe subscription IDs.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable stripeSubscriptionIds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Info about the paywall the purchase was made from.
SWIFT_CLASS_NAMED("PaywallInfo")
@interface SWKRedemptionPaywallInfo : NSObject
/// The identifier of the paywall.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// The name of the placement.
@property (nonatomic, readonly, copy) NSString * _Nonnull placementName;
/// The params of the placement.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull placementParams;
/// The ID of the paywall variant.
@property (nonatomic, readonly, copy) NSString * _Nonnull variantId;
/// The ID of the experiment that the paywall belongs to.
@property (nonatomic, readonly, copy) NSString * _Nonnull experimentId;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier placementName:(NSString * _Nonnull)placementName placementParams:(NSDictionary<NSString *, id> * _Nonnull)placementParams variantId:(NSString * _Nonnull)variantId experimentId:(NSString * _Nonnull)experimentId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The result of redeeming a code via web checkout.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKRedemptionResultType, "RedemptionResultType", closed) {
/// The redemption succeeded.
  SWKRedemptionResultTypeSuccess = 0,
/// The redemption failed.
  SWKRedemptionResultTypeError = 1,
/// The code has expired.
  SWKRedemptionResultTypeCodeExpired = 2,
/// The code is invalid.
  SWKRedemptionResultTypeInvalidCode = 3,
/// The subscription that the code redeems has expired.
  SWKRedemptionResultTypeExpiredSubscription = 4,
};

/// An enum that defines the possible outcomes of attempting to restore a product.
/// When implementing the <code>PurchaseControllerObjc/restorePurchases(completion:)</code> delegate
/// method, all cases should be considered.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKRestorationResult, "RestorationResultObjc", closed) {
/// The restore was successful – this does not mean the user is subscribed, it just means your restore
/// logic did not fail due to some error. User will see an alert if <code>Superwall/subscriptionStatus</code> is
/// not <code>SubscriptionStatus/active</code> after returning this value.
  SWKRestorationResultRestored = 0,
/// The restore failed for some reason, e.g. you were not able to determine if the user has an active subscription.
/// User will see an alert if this value is returned.
  SWKRestorationResultFailed = 1,
};




/// The payment for the transaction.
SWIFT_CLASS_NAMED("StorePayment")
@interface SWKStorePayment : NSObject
/// The ID of a product being bought.
@property (nonatomic, readonly, copy) NSString * _Nonnull productIdentifier;
/// The number of items the user wants to purchase.
@property (nonatomic, readonly) NSInteger quantity;
/// The ID for the discount offer to apply to the payment.
@property (nonatomic, readonly, copy) NSString * _Nullable discountIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SKProduct;
@class NSDate;
@class NSDecimalNumber;
@class SWKSubscriptionPeriod;
@class SWKStoreProductDiscount;

/// A convenience wrapper around a StoreKit 1 or StoreKit 2 product.
SWIFT_CLASS_NAMED("StoreProduct")
@interface SWKStoreProduct : NSObject
/// A <code>Set</code> of <code>Entitlements</code> associated with the product.
@property (nonatomic, readonly, copy) NSSet<SWKEntitlement *> * _Nonnull entitlements;
/// Returns the <code>SKProduct</code> if this <code>StoreProduct</code> represents a <code>StoreKit.SKProduct</code>.
@property (nonatomic, readonly, strong) SKProduct * _Nullable sk1Product;
/// The product identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull productIdentifier;
/// The product’s subscription group id
@property (nonatomic, readonly, copy) NSString * _Nullable subscriptionGroupIdentifier;
/// All the attributes that can be referenced in audience filters.
/// Note that <code>isSubscribed</code> is added to the attributes right before a paywall is displayed.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull attributes;
/// The localized price.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedPrice;
/// The localized subscription period.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedSubscriptionPeriod;
/// The subscription period unit, e.g. week.
/// This returns week, day, month, 2 months, quarter, 6 months and year
/// depending on the number of units.
@property (nonatomic, readonly, copy) NSString * _Nonnull period;
@property (nonatomic, readonly, copy) NSString * _Nonnull periodly;
/// The number of weeks in the product’s subscription period.
@property (nonatomic, readonly) NSInteger periodWeeks;
/// The string value of the number of weeks in the product’s subscription period.
@property (nonatomic, readonly, copy) NSString * _Nonnull periodWeeksString;
/// The number of months in the product’s subscription period.
@property (nonatomic, readonly) NSInteger periodMonths;
/// The string value of the number of months in the product’s subscription period.
@property (nonatomic, readonly, copy) NSString * _Nonnull periodMonthsString;
/// The number of years in the product’s subscription period.
@property (nonatomic, readonly) NSInteger periodYears;
/// The string value of the number of years in the product’s subscription period.
@property (nonatomic, readonly, copy) NSString * _Nonnull periodYearsString;
/// The number of days in the product’s subscription period.
@property (nonatomic, readonly) NSInteger periodDays;
/// The string value of the number of days in the product’s subscription period.
@property (nonatomic, readonly, copy) NSString * _Nonnull periodDaysString;
/// The product’s localized daily price.
@property (nonatomic, readonly, copy) NSString * _Nonnull dailyPrice;
/// The product’s localized weekly price.
@property (nonatomic, readonly, copy) NSString * _Nonnull weeklyPrice;
/// The product’s localized monthly price.
@property (nonatomic, readonly, copy) NSString * _Nonnull monthlyPrice;
/// The product’s localized yearly price.
@property (nonatomic, readonly, copy) NSString * _Nonnull yearlyPrice;
/// A boolean indicating whether the product has an introductory price.
@property (nonatomic, readonly) BOOL hasFreeTrial;
/// The product’s trial period end date.
@property (nonatomic, readonly, copy) NSDate * _Nullable trialPeriodEndDate;
/// The product’s trial period end date formatted using <code>DateFormatter.Style.medium</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull trialPeriodEndDateString;
/// The product’s introductory price duration in days.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedTrialPeriodPrice;
/// The product’s introductory price duration in days.
@property (nonatomic, readonly) NSDecimal trialPeriodPrice;
/// The product’s introductory price duration in days.
@property (nonatomic, readonly) NSInteger trialPeriodDays;
/// The product’s string value of the introductory price duration in days.
@property (nonatomic, readonly, copy) NSString * _Nonnull trialPeriodDaysString;
/// The product’s introductory price duration in weeks.
@property (nonatomic, readonly) NSInteger trialPeriodWeeks;
/// The product’s string value of the introductory price duration in weeks.
@property (nonatomic, readonly, copy) NSString * _Nonnull trialPeriodWeeksString;
/// The product’s introductory price duration in months.
@property (nonatomic, readonly) NSInteger trialPeriodMonths;
/// The product’s string value of the introductory price duration in months.
@property (nonatomic, readonly, copy) NSString * _Nonnull trialPeriodMonthsString;
/// The product’s introductory price duration in years.
@property (nonatomic, readonly) NSInteger trialPeriodYears;
/// The product’s string value of the introductory price duration in years.
@property (nonatomic, readonly, copy) NSString * _Nonnull trialPeriodYearsString;
/// The product’s introductory price duration in days, e.g. 7-day.
@property (nonatomic, readonly, copy) NSString * _Nonnull trialPeriodText;
/// The product’s locale.
@property (nonatomic, readonly, copy) NSString * _Nonnull locale;
/// The language code of the product’s locale.
@property (nonatomic, readonly, copy) NSString * _Nullable languageCode;
/// The currency code of the product’s locale.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// The currency symbol of the product’s locale.
@property (nonatomic, readonly, copy) NSString * _Nullable currencySymbol;
/// A boolean that indicates whether the product is family shareable.
@property (nonatomic, readonly) BOOL isFamilyShareable SWIFT_AVAILABILITY(watchos,introduced=8.0) SWIFT_AVAILABILITY(tvos,introduced=14.0) SWIFT_AVAILABILITY(macos,introduced=11.0) SWIFT_AVAILABILITY(ios,introduced=14.0);
/// The region code of the product’s price locale.
@property (nonatomic, readonly, copy) NSString * _Nullable regionCode;
/// The price of the product in the local currency.
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull price;
/// The product’s subscription period.
@property (nonatomic, readonly, strong) SWKSubscriptionPeriod * _Nullable subscriptionPeriod;
/// The product’s introductory discount.
@property (nonatomic, readonly, strong) SWKStoreProductDiscount * _Nullable introductoryDiscount;
/// The discounts associated with the product.
@property (nonatomic, readonly, copy) NSArray<SWKStoreProductDiscount *> * _Nonnull discounts;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)initWithSk1Product:(SKProduct * _Nonnull)sk1Product;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An objc-only type that specifies a store and a product.
SWIFT_CLASS_NAMED("StoreProductAdapterObjc")
@interface SWKStoreProductAdapter : NSObject
/// The store associated with the product.
@property (nonatomic, readonly) enum SWKProductStore store;
/// The App Store product. This is non-nil if <code>store</code> is
/// <code>appStore</code>.
@property (nonatomic, readonly, strong) SWKAppStoreProduct * _Nullable appStoreProduct;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SWKPaymentMode : NSInteger;
enum SWKDiscountType : NSInteger;

/// Type that wraps <code>StoreKit.Product.SubscriptionOffer</code> and <code>SKProductDiscount</code>
/// and provides access to their properties.
/// Information about a subscription offer that you configured in App Store Connect.
SWIFT_CLASS_NAMED("StoreProductDiscount")
@interface SWKStoreProductDiscount : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable offerIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// The discount price of the product in the local currency.
@property (nonatomic, readonly, strong) NSDecimalNumber * _Nonnull price;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedPriceString;
@property (nonatomic, readonly) enum SWKPaymentMode paymentMode;
@property (nonatomic, readonly, strong) SWKSubscriptionPeriod * _Nonnull subscriptionPeriod;
@property (nonatomic, readonly) NSInteger numberOfPeriods;
@property (nonatomic, readonly) enum SWKDiscountType type;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The payment mode for a <code>StoreProductDiscount</code>
/// Indicates how the product discount price is charged.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKPaymentMode, "PaymentMode", closed) {
/// Price is charged one or more times
  SWKPaymentModePayAsYouGo = 0,
/// Price is charged once in advance
  SWKPaymentModePayUpFront = 1,
/// No initial charge
  SWKPaymentModeFreeTrial = 2,
};

/// The discount type for a <code>StoreProductDiscount</code>
/// Wraps <code>SKProductDiscount.Type</code> if this <code>StoreProductDiscount</code> represents a <code>SKProductDiscount</code>.
/// Wraps  <code>Product.SubscriptionOffer.OfferType</code> if this <code>StoreProductDiscount</code> represents
/// a <code>Product.SubscriptionOffer</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKDiscountType, "DiscountType", closed) {
/// Introductory offer
  SWKDiscountTypeIntroductory = 0,
/// Promotional offer for subscriptions
  SWKDiscountTypePromotional = 1,
};




@class SKProductDiscount;

@interface SWKStoreProductDiscount (SWIFT_EXTENSION(SuperwallKit))
/// Returns the <code>SK1ProductDiscount</code> if this <code>StoreProductDiscount</code> represents a <code>SKProductDiscount</code>.
@property (nonatomic, readonly, strong) SKProductDiscount * _Nullable sk1Discount;
@end

@class NSUUID;
@class SKPaymentTransaction;

/// A convenience wrapper around a StoreKit 1 or StoreKit 2 transaction.
SWIFT_CLASS_NAMED("StoreTransaction")
@interface SWKStoreTransaction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull configRequestId;
@property (nonatomic, readonly, copy) NSString * _Nonnull appSessionId;
@property (nonatomic, readonly, copy) NSDate * _Nullable transactionDate;
@property (nonatomic, readonly, copy) NSString * _Nonnull originalTransactionIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable storeTransactionId;
@property (nonatomic, readonly, strong) SWKStorePayment * _Nonnull payment;
@property (nonatomic, readonly, copy) NSDate * _Nullable originalTransactionDate;
@property (nonatomic, readonly, copy) NSString * _Nullable webOrderLineItemID;
@property (nonatomic, readonly, copy) NSString * _Nullable appBundleId;
@property (nonatomic, readonly, copy) NSString * _Nullable subscriptionGroupId;
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
@property (nonatomic, readonly, copy) NSString * _Nullable offerId;
@property (nonatomic, readonly, copy) NSDate * _Nullable revocationDate;
@property (nonatomic, readonly, copy) NSUUID * _Nullable appAccountToken;
/// Returns the <code>SKPaymentTransaction</code> if this <code>StoreTransaction</code> represents a <code>SKPaymentTransaction</code>.
@property (nonatomic, readonly, strong) SKPaymentTransaction * _Nullable sk1Transaction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum SWKSubscriptionPeriodUnit : NSInteger;

/// The duration of time between subscription renewals.
/// Use the value and the unit together to determine the subscription period.
/// For example, if the unit is  <code>.month</code>, and the value is <code>3</code>, the subscription period is three months.
SWIFT_CLASS_NAMED("SubscriptionPeriod")
@interface SWKSubscriptionPeriod : NSObject
/// The number of period units.
@property (nonatomic, readonly) NSInteger value;
/// The increment of time that a subscription period is specified in.
@property (nonatomic, readonly) enum SWKSubscriptionPeriodUnit unit;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Units of time used to describe subscription periods.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKSubscriptionPeriodUnit, "Unit", closed) {
/// A subscription period unit of a day.
  SWKSubscriptionPeriodUnitDay = 0,
/// A subscription period unit of a week.
  SWKSubscriptionPeriodUnitWeek = 1,
/// A subscription period unit of a month.
  SWKSubscriptionPeriodUnitMonth = 2,
/// A subscription period unit of a year.
  SWKSubscriptionPeriodUnitYear = 3,
};


/// An enum representing the entitlement status of the user.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKSubscriptionStatus, "SubscriptionStatusObjc", closed) {
/// The subscription status is unknown.
  SWKSubscriptionStatusUnknown = 0,
/// The user doesn’t have an active subscription.
  SWKSubscriptionStatusInactive = 1,
/// The user has an active subscription.
  SWKSubscriptionStatusActive = 2,
};

@protocol SWKSuperwallDelegate;
@class SWKSuperwallOptions;

/// The primary class for integrating Superwall into your application. After configuring via
/// <code>configure(apiKey:purchaseController:options:completion:)-52tke</code>, it provides access to
/// all its features via instance functions and variables.
SWIFT_CLASS("_TtC12SuperwallKit9Superwall")
@interface Superwall : NSObject
/// The Objective-C delegate that handles Superwall lifecycle events.
@property (nonatomic, strong) id <SWKSuperwallDelegate> _Nullable delegate;
/// Specifies the detail of the logs returned from the SDK to the console.
@property (nonatomic) enum SWKLogLevel logLevel;
/// Sets the device locale identifier to use when evaluating audience filters and getting localized paywalls.
/// This defaults to the <code>autoupdatingCurrent</code> locale identifier. However, you can set
/// this to any locale identifier to override it. E.g. <code>en_GB</code>. This is typically used for testing
/// purposes.
/// You can also preview your paywall in different locales using
/// <a href="https://docs.superwall.com/docs/in-app-paywall-previews">In-App Previews</a>.
@property (nonatomic, copy) NSString * _Nullable localeIdentifier;
/// Properties stored about the user, set using <code>setUserAttributes(_:)</code>.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull userAttributes;
/// The current user’s id.
/// If you haven’t called <code>identify(userId:options:)</code>,
/// this value will return an anonymous user id which is cached to disk
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
/// Indicates whether the user is logged in to Superwall.
/// If you have previously called <code>identify(userId:options:)</code>, this will
/// return <code>true</code>.
///
/// returns:
/// A boolean indicating whether the user is logged in or not.
@property (nonatomic, readonly) BOOL isLoggedIn;
/// The presented paywall view controller.
@property (nonatomic, readonly, strong) UIViewController * _Nullable presentedViewController;
/// The <code>PaywallInfo</code> object of the most recently presented view controller.
@property (nonatomic, readonly, strong) SWKPaywallInfo * _Nullable latestPaywallInfo;
/// A published property that indicates the configuration status of the SDK.
/// This is <code>ConfigurationStatus/pending</code> when the SDK is yet to finish
/// configuring. Upon successful configuration, it will change to <code>ConfigurationStatus/configured</code>.
/// On failure it will change to <code>ConfigurationStatus/failed</code>.
/// If you’re using Combine or SwiftUI, you can subscribe or bind to this to get notified when the status changes.
@property (nonatomic) enum SWKConfigurationStatus configurationStatus;
/// Returns the subscription status of the user.
/// Check the delegate function
/// <code>SuperwallDelegateObjc/subscriptionStatusDidChange(from:to:)</code>
/// to receive a callback every time it changes.
@property (nonatomic, readonly) enum SWKSubscriptionStatus subscriptionStatus;
/// The <code>Entitlement</code>s tied to the device.
@property (nonatomic, readonly, strong) SWKEntitlementsInfo * _Nonnull entitlements;
/// The configured shared instance of <code>Superwall</code>.
/// warning:
/// You must call <code>configure(apiKey:purchaseController:options:completion:)-52tke</code>
/// to initialize <code>Superwall</code> before using this.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Superwall * _Nonnull sharedInstance;)
+ (Superwall * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// A variable that is only <code>true</code> if <code>shared</code> is available for use.
/// Gets set to <code>true</code> immediately after
/// <code>configure(apiKey:purchaseController:options:completion:)-52tke</code> is
/// called.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isInitialized;)
+ (BOOL)isInitialized SWIFT_WARN_UNUSED_RESULT;
/// Determines whether a paywall is being presented.
@property (nonatomic, readonly) BOOL isPaywallPresented;
/// Sets <code>subscriptionStatus</code> to an<code>unknown</code> state.
- (void)setUnknownSubscriptionStatus;
/// Sets <code>subscriptionStatus</code> to an<code>inactive</code> state.
- (void)setInactiveSubscriptionStatus;
/// Sets <code>subscriptionStatus</code> to an<code>active</code> state with the
/// specified entitlements.
- (void)setActiveSubscriptionStatusWith:(NSSet<SWKEntitlement *> * _Nonnull)entitlements;
/// Objective-C-only function that configures a shared instance of <code>Superwall</code> for use throughout your app.
/// Call this as soon as your app finishes launching in <code>application(_:didFinishLaunchingWithOptions:)</code>. Check out
/// <a href="https://docs.superwall.com/docs/configuring-the-sdk">Configuring the SDK</a> for information about how to configure the SDK.
/// \param apiKey Your Public API Key that you can get from the Superwall dashboard settings. If you don’t have an account, you
/// can <a href="https://superwall.com/sign-up">sign up for free</a>.
///
/// \param purchaseController An optional object that conforms to <code>PurchaseControllerObjc</code>. Implement this if you’d
/// like to handle all subscription-related logic yourself. You’ll need to also set the <code>subscriptionStatus</code> every time the user’s
/// entitlements change. You can read more about that in <a href="https://docs.superwall.com/docs/advanced-configuration">Purchases and Subscription Status</a>.
/// If <code>nil</code>, Superwall will handle all subscription-related logic itself.  Defaults to <code>nil</code>.
///
/// \param options A <code>SuperwallOptions</code> object which allows you to customise the appearance and behavior of the paywall.
///
/// \param completion An optional completion handler that lets you know when Superwall has finished configuring.
///
///
/// returns:
/// The configured <code>Superwall</code> instance.
+ (Superwall * _Nonnull)configureWithApiKey:(NSString * _Nonnull)apiKey purchaseController:(id <SWKPurchaseController> _Nullable)purchaseController options:(SWKSuperwallOptions * _Nullable)options completion:(void (^ _Nullable)(void))completion;
/// Gets an array of all confirmed experiment assignments.
///
/// returns:
/// An array of <code>Assignment</code> objects.
- (NSArray<SWKConfirmedAssignment *> * _Nonnull)getAssignments SWIFT_WARN_UNUSED_RESULT;
/// Confirms all experiment assignments and returns them in an array.
/// This tracks <code>SuperwallEvent/confirmAllAssignments</code> in the delegate.
/// Note that the assignments may be different when a placement is registered due to changes
/// in user, placement, or device parameters used in audience filters.
///
/// returns:
/// An array of <code>Assignment</code> objects.
- (void)confirmAllAssignmentsWithCompletionHandler:(void (^ _Nonnull)(NSArray<SWKConfirmedAssignment *> * _Nonnull))completionHandler;
/// Confirms all experiment assignments and returns them in an array.
/// This tracks <code>SuperwallEvent/confirmAllAssignments</code> in the delegate.
/// Note that the assignments may be different when a placement is registered due to changes
/// in user, placement, or device parameters used in audience filters.
/// \param completion A completion block that accepts an array of <code>Assignment</code> objects.
///
- (void)confirmAllAssignmentsWithCompletion:(void (^ _Nullable)(NSArray<SWKConfirmedAssignment *> * _Nonnull))completion;
/// Objective-C-only function that configures a shared instance of <code>Superwall</code> for use throughout your app.
/// Call this as soon as your app finishes launching in <code>application(_:didFinishLaunchingWithOptions:)</code>. Check out
/// <a href="https://docs.superwall.com/docs/configuring-the-sdk">Configuring the SDK</a> for information about how to
/// configure the SDK.
/// \param apiKey Your Public API Key that you can get from the Superwall dashboard settings. If you don’t have an account, you
/// can <a href="https://superwall.com/sign-up">sign up for free</a>.
///
///
/// returns:
/// The configured <code>Superwall</code> instance.
+ (Superwall * _Nonnull)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Gets the <code>StoreProduct</code>s for given product identifiers.
/// \param identifiers A set of product identifiers.
///
///
/// returns:
/// A <code>Set</code> of <code>StoreProduct</code>s.
- (void)productsFor:(NSSet<NSString *> * _Nonnull)identifiers completionHandler:(void (^ _Nonnull)(NSSet<SWKStoreProduct *> * _Nonnull))completionHandler;
/// Gets the <code>StoreProduct</code>s for given product identifiers.
/// \param identifiers A set of product identifiers.
///
/// \param completion A completion block that accepts a <code>Set</code> of <code>StoreProduct</code> objects.
///
- (void)productsFor:(NSSet<NSString *> * _Nonnull)identifiers completion:(void (^ _Nonnull)(NSSet<SWKStoreProduct *> * _Nonnull))completion completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Preloads all paywalls that the user may see based on campaigns and placements in your Superwall dashboard.
/// To use this, first set <code>PaywallOptions/shouldPreload</code>  to <code>false</code> when configuring the SDK. Then call this
/// function when you would like preloading to begin.
/// Note: This will not reload any paywalls you’ve already preloaded via <code>preloadPaywalls(forPlacements:)</code>.
- (void)preloadAllPaywalls;
/// Preloads paywalls for specific placements.
/// To use this, first set <code>PaywallOptions/shouldPreload</code>  to <code>false</code> when configuring the SDK. Then call this
/// function when you would like preloading to begin.
/// Note: This will not reload any paywalls you’ve already preloaded.
/// \param placements A set of placement names whose paywalls you want to preload.
///
- (void)preloadPaywallsForPlacements:(NSSet<NSString *> * _Nonnull)placements;
/// <em>For internal use only. Do not use this.</em>
- (void)setPlatformWrapper:(NSString * _Nonnull)platformWrapper version:(NSString * _Nonnull)version;
/// Handles a deep link sent to your app to open a preview of your paywall.
/// You can preview your paywall on-device before going live by utilizing paywall previews. This uses a deep link to render a
/// preview of a paywall you’ve configured on the Superwall dashboard on your device. See
/// <a href="https://docs.superwall.com/docs/in-app-paywall-previews">In-App Previews</a> for
/// more.
/// \param url The URL of the deep link.
///
///
/// returns:
/// A <code>Bool</code> that is <code>true</code> if the deep link was handled.
- (BOOL)handleDeepLink:(NSURL * _Nonnull)url SWIFT_DEPRECATED_MSG("Use the static method Superwall.handleDeepLink(_:) instead.");
/// Handles a deep link sent to your app to open a preview of your paywall.
/// You can preview your paywall on-device before going live by utilizing paywall previews. This uses a deep link to render a
/// preview of a paywall you’ve configured on the Superwall dashboard on your device. See
/// <a href="https://docs.superwall.com/docs/in-app-paywall-previews">In-App Previews</a> for
/// more.
/// \param url The URL of the deep link.
///
///
/// returns:
/// A <code>Bool</code> that is <code>true</code> if the deep link was handled.
+ (BOOL)handleDeepLink:(NSURL * _Nonnull)url;
/// Toggles the paywall loading spinner on and off.
/// Useful for when you want to do display a spinner when doing asynchronous work inside
/// <code>SuperwallDelegate/handleCustomPaywallAction(withName:)-b8fk</code>.
/// \param isHidden Toggles the paywall loading spinner on and off.
///
- (void)togglePaywallSpinnerWithIsHidden:(BOOL)isHidden;
/// Resets the <code>userId</code>, on-device paywall assignments, and data stored
/// by Superwall.
- (void)reset;
/// Objective-C-only method. Initiates a purchase of a <code>SKProduct</code>.
/// Use this function to purchase any <code>SKProduct</code>, regardless of whether you
/// have a paywall or not. Superwall will handle the purchase with <code>StoreKit</code>
/// and return the <code>PurchaseResult</code>. You’ll see the data associated with the
/// purchase on the Superwall dashboard.
/// note:
/// You only need to finish the transaction after this if you’re providing a <code>PurchaseController</code>
/// when configuring the SDK. Otherwise <code>Superwall</code> will handle this for you.
/// warning:
/// You cannot use this function while also setting <code>SuperwallOptions/shouldObservePurchases</code>
/// to <code>true</code>.
/// \param product The <code>SKProduct</code> you wish to purchase.
///
/// \param completion A completion block that is called when the purchase completes.
/// This accepts a <code>PurchaseResult</code>.
///
- (void)purchase:(SKProduct * _Nonnull)product completion:(void (^ _Nonnull)(enum SWKPurchaseResult))completion;
/// Objective-C-only method. Restores purchases.
/// note:
/// This could prompt the user to log in to their App Store account, so should only be performed
/// on request of the user. Typically with a button in settings or near your purchase UI.
/// warning:
/// A successful restoration does not mean that the user is subscribed, only that
/// the restore  did not fail due to some error. If you aren’t using a <code>PurchaseController</code>, the user will
/// see an alert if <code>Superwall/subscriptionStatus</code> is not <code>SubscriptionStatus/active</code>
/// after returning this value.
/// \param completion A completion block that is called when the restoration completes.
/// This accepts a <code>RestorationResultObjc</code>.
///
- (void)restorePurchasesWithCompletion:(void (^ _Nonnull)(enum SWKRestorationResult))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GCExtendedGamepad;
@class GCControllerElement;

@interface Superwall (SWIFT_EXTENSION(SuperwallKit))
/// Forwards Game controller events to the paywall.
/// Call this in Gamepad’s <code>valueChanged</code> function to forward game controller events to the paywall via <code>paywall.js</code>.
/// See <a href="https://docs.superwall.com/docs/game-controller-support">Game Controller Support</a> for more information.
/// \param gamepad The extended Gamepad controller profile.
///
/// \param element The game controller element.
///
- (void)gamepadValueChangedWithGamepad:(GCExtendedGamepad * _Nonnull)gamepad element:(GCControllerElement * _Nonnull)element;
@end















@interface Superwall (SWIFT_EXTENSION(SuperwallKit))
/// Creates an account with Superwall. This links a <code>userId</code> to Superwall’s automatically generated alias.
/// Call this as soon as you have a <code>userId</code>.
/// \param userId Your user’s unique identifier, as defined by your backend system.
///
/// \param options An <code>IdentityOptions</code> object, whose property
/// <code>IdentityOptions/restorePaywallAssignments</code> you can set to <code>true</code>
/// to tell the SDK to wait to restore paywall assignments from the server before presenting any paywalls.
/// This should only be used in advanced use cases. If you expect
/// users of your app to switch accounts or delete/reinstall a lot, you’d set this when users log in to an
/// existing account.
///
- (void)identifyWithUserId:(NSString * _Nonnull)userId options:(SWKIdentityOptions * _Nullable)options;
/// Objective-C-only method. Creates an account with Superwall. This links a <code>userId</code> to Superwall’s automatically generated alias.
/// Call this as soon as you have a <code>userId</code>.
/// \param userId Your user’s unique identifier, as defined by your backend system.
///
- (void)identifyWithUserId:(NSString * _Nonnull)userId;
@end









@interface Superwall (SWIFT_EXTENSION(SuperwallKit))
/// Objective-C-only method that gets the  <code>PaywallViewController</code> object, which you can present
/// however you want.
/// note:
/// The remotely configured presentation style will be ignored, it is up to you
/// to set it programmatically.
/// warning:
/// You’re responsible for the deallocation of the returned <code>PaywallViewController</code>. If you have a <code>PaywallViewController</code>
/// presented somewhere and you try to present the same <code>PaywallViewController</code> elsewhere, you will get a crash.
/// \param placement The name of the placement, as you have defined on the Superwall dashboard.
///
/// \param params Optional parameters you’d like to pass with your placement. These can be referenced within the audience filters
/// of your campaign. Keys beginning with <code>$</code> are reserved for Superwall and will be dropped. Values can be any
/// JSON encodable value, URLs or Dates. Arrays and dictionaries as values are not supported at this time, and will
/// be dropped.
///
/// \param paywallOverrides An optional <code>PaywallOverrides</code> object whose parameters override the paywall
/// defaults. Use this to override products and presentation style. Defaults to <code>nil</code>.
///
/// \param completion A completion block that accepts a <code>GetPaywallResultObjc</code> object. First check
/// <code>GetPaywallResultObjc/paywall</code> to see if was retrieved. Then check
/// <code>GetPaywallResultObjc/skippedReason</code> is not <code>PaywallSkippedReasonObjc/none</code>
/// to see if it’s presentation was intentionally skipped. Then check
/// <code>GetPaywallResultObjc/error</code> for any errors that may have occurred.
///
/// \param delegate A delegate responsible for handling user interactions with the retrieved <code>PaywallViewController</code>.
///
- (void)getPaywallForPlacement:(NSString * _Nonnull)placement params:(NSDictionary<NSString *, id> * _Nullable)params paywallOverrides:(SWKPaywallOverrides * _Nullable)paywallOverrides delegate:(id <SWKPaywallViewControllerDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(SWKGetPaywallResult * _Nonnull))completion;
@end


@interface Superwall (SWIFT_EXTENSION(SuperwallKit))
/// The Objective-C method for setting user attributes for use in your paywalls and the dashboard.
/// If the existing user attributes dictionary already has a value for a given property, the old
/// value is overwritten. Existing properties will not be affected.
/// Useful for analytics and campaign audience filters you may define in the Superwall Dashboard.
/// They should <em>not</em> be used as a source of truth for sensitive information.
/// Here’s how you might set user attributes after retrieving your user’s data:
/// \code
/// NSDictionary *userAttributes = @{ key : value, key2 : value2};
/// [[Superwall sharedInstance] setUserAttributes:userAttributes];
///
/// \endcode\param attributes An <code>NSDictionary</code> used to describe any custom
/// attributes you’d like to store for the user. Values can be any JSON encodable value, <code>URL</code>s or <code>Date</code>s.
/// Note: Keys beginning with <code>$</code> are reserved for Superwall and will be dropped. Arrays and dictionaries
/// as values are not supported at this time, and will be dropped.
///
- (void)setUserAttributes:(NSDictionary * _Nonnull)attributes;
/// The Objective-C method for removing user attributes for use in your paywalls and the dashboard.
/// Example:
/// \code
/// [[Superwall sharedInstance] removeUserAttributes:@[@"key1", @"key2"]];
///
/// \endcode\param keys An array containing the keys you wish to remove from the user attributes dictionary.
///
- (void)removeUserAttributes:(NSArray<NSString *> * _Nonnull)keys;
@end


@interface Superwall (SWIFT_EXTENSION(SuperwallKit))
/// Objective-C-only function to preemptively gets the result of registering a placement.
/// This helps you determine whether a particular placement will present a paywall
/// in the future.
/// Note that this method does not present a paywall. To do that, use
/// <code>register(placement:params:handler:feature:)</code>.
/// \param placement The name of the placement you want to register.
///
/// \param params Optional parameters you’d like to pass with your placement.
///
///
/// returns:
/// A <code>PresentationResultObjc</code> object that contains information about the result of registering a placement.
- (void)getPresentationResultForPlacement:(NSString * _Nonnull)placement params:(NSDictionary<NSString *, id> * _Nullable)params completionHandler:(void (^ _Nonnull)(SWKPresentationResult * _Nonnull))completionHandler;
/// Objective-C-only function to preemptively gets the result of registering a placement.
/// This helps you determine whether a particular placement will present a paywall
/// in the future.
/// Note that this method does not present a paywall. To do that, use
/// <code>register(placement:params:handler:feature:)</code>.
/// <ul>
///   <li>
///     Parameters placement: The name of the placement you want to register.
///   </li>
/// </ul>
///
/// returns:
/// A <code>PresentationResultObjc</code> object that contains information about the result of registering a placement.
- (void)getPresentationResultForPlacement:(NSString * _Nonnull)placement completionHandler:(void (^ _Nonnull)(SWKPresentationResult * _Nonnull))completionHandler;
@end


@interface Superwall (SWIFT_EXTENSION(SuperwallKit))
/// Dismisses the presented paywall.
/// \param completion An optional completion block that gets called after the paywall is dismissed.
/// Defaults to <code>nil</code>.
///
- (void)dismissWithCompletion:(void (^ _Nullable)(void))completion;
/// Objective-C-only method. Dismisses the presented paywall.
- (void)dismiss;
/// Registers a placement to access a feature. When the placement is added to a campaign on the Superwall dashboard, it can show a paywall.
/// This shows a paywall to the user when: A placement you provide is added to a campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>; the user matches an audience filter in the campaign; and the user doesn’t have an active subscription.
/// Before using this method, you’ll first need to create a campaign and add the placement to the campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>.
/// The paywall shown to the user is determined by the audience filters defined in the campaign. When a user is assigned a paywall within an audience, they will continue to see that paywall unless you remove the paywall from the audience or reset assignments to the paywall.
/// \param placement The name of the placement you wish to register.
///
/// \param params Optional parameters you’d like to pass with your placement. These can be referenced within the audience filters of your campaign. Keys beginning with <code>$</code> are reserved for Superwall and will be dropped. Values can be any JSON encodable value, URLs or Dates. Arrays and dictionaries as values are not supported at this time, and will be dropped. Defaults to <code>nil</code>.
///
/// \param handler An optional handler whose functions provide status updates for a paywall. Defaults to <code>nil</code>.
///
/// \param feature A completion block containing a feature that you wish to paywall. Access to this block is remotely configurable via the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>. If the paywall is set to <em>Non Gated</em>, this will be called when the paywall is dismissed or if the user is already paying. If the paywall is <em>Gated</em>, this will be called only if the user is already paying or if they begin paying. If no paywall is configured, this gets called immediately. This will not be called in the event of an error, which you can detect via the <code>handler</code>.
///
- (void)registerWithPlacement:(NSString * _Nonnull)placement params:(NSDictionary<NSString *, id> * _Nullable)params handler:(SWKPaywallPresentationHandler * _Nullable)handler feature:(void (^ _Nonnull)(void))feature;
/// Registers an placement which, when added to a campaign on the Superwall dashboard, can show a paywall.
/// This shows a paywall to the user when: A placement you provide is added to a campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>; the user matches an audience filter in the campaign; and the user doesn’t have an active subscription.
/// Before using this method, you’ll first need to create a campaign and add the placement to the campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>.
/// The paywall shown to the user is determined by the audience filters defined in the campaign. When a user is assigned a paywall within an audience, they will continue to see that paywall unless you remove the paywall from the audience or reset assignments to the paywall.
/// \param placement The name of the placement you wish to register.
///
/// \param params Optional parameters you’d like to pass with your placement. These can be referenced within the audience filters of your campaign. Keys beginning with <code>$</code> are reserved for Superwall and will be dropped. Values can be any JSON encodable value, URLs or Dates. Arrays and dictionaries as values are not supported at this time, and will be dropped. Defaults to <code>nil</code>.
///
/// \param handler An optional handler whose functions provide status updates for a paywall. Defaults to <code>nil</code>.
///
- (void)registerWithPlacement:(NSString * _Nonnull)placement params:(NSDictionary<NSString *, id> * _Nullable)params handler:(SWKPaywallPresentationHandler * _Nullable)handler;
/// Objective-C-only convenience method. Registers a placement which, when added to a campaign on the Superwall dashboard, can show a paywall.
/// This shows a paywall to the user when: A placement you provide is added to a campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>; the user matches an audience in the campaign; and the user doesn’t have an active subscription.
/// Before using this method, you’ll first need to create a campaign and add the placement to the campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>.
/// The paywall shown to the user is determined by the audience filters defined in the campaign. When a user is assigned a paywall within an audience, they will continue to see that paywall unless you remove the paywall from the audience or reset assignments to the paywall.
/// \param placement The name of the placement you wish to register.
///
- (void)registerWithPlacement:(NSString * _Nonnull)placement;
/// Objective-C-only convenience method. Registers a placement which, when added to a campaign on the Superwall dashboard, can show a paywall.
/// This shows a paywall to the user when: A placement you provide is added to a campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>; the user matches an audience in the campaign; and the user doesn’t have an active subscription.
/// Before using this method, you’ll first need to create a campaign and add the placement to the campaign on the <a href="https://superwall.com/dashboard">Superwall Dashboard</a>.
/// The paywall shown to the user is determined by the audience filters defined in the campaign. When a user is assigned a paywall within an audience, they will continue to see that paywall unless you remove the paywall from the audience or reset assignments to the paywall.
/// \param placement The name of the placement you wish to register.
///
/// \param params Optional parameters you’d like to pass with your placement. These can be referenced within the audience filters of your campaign. Keys beginning with <code>$</code> are reserved for Superwall and will be dropped. Values can be any JSON encodable value, URLs or Dates. Arrays and dictionaries as values are not supported at this time, and will be dropped. Defaults to <code>nil</code>.
///
- (void)registerWithPlacement:(NSString * _Nonnull)placement params:(NSDictionary<NSString *, id> * _Nullable)params;
@end

@class NSError;

@interface Superwall (SWIFT_EXTENSION(SuperwallKit))
- (void)preloadPaywallsForTriggers:(NSSet<NSString *> * _Nonnull)triggers SWIFT_UNAVAILABLE_MSG("'preloadPaywalls' has been renamed to 'preloadPaywallsForPlacements:'");
- (void)triggerWithEvent:(NSString * _Nullable)event params:(NSDictionary<NSString *, id> * _Nullable)params on:(UIViewController * _Nullable)viewController ignoreSubscriptionStatus:(BOOL)ignoreSubscriptionStatus presentationStyleOverride:(enum SWKPaywallPresentationStyle)presentationStyleOverride onSkip:(void (^ _Nullable)(NSError * _Nullable))onSkip onPresent:(void (^ _Nullable)(SWKPaywallInfo * _Nonnull))onPresent onDismiss:(void (^ _Nullable)(BOOL, NSString * _Nullable, SWKPaywallInfo * _Nonnull))onDismiss SWIFT_UNAVAILABLE_MSG("'trigger' has been renamed to 'registerWithPlacement:params:handler:feature:'");
- (void)track:(NSString * _Nonnull)name :(NSDictionary<NSString *, id> * _Nonnull)params SWIFT_UNAVAILABLE_MSG("'track' has been renamed to 'registerWithPlacement:params:'");
- (void)localizationOverrideWithLocaleIdentifier:(NSString * _Nullable)localeIdentifier SWIFT_UNAVAILABLE_MSG("Set the SuperwallOption \"localeIdentifier\" instead.");
- (void)registerWithEvent:(NSString * _Nonnull)event params:(NSDictionary<NSString *, id> * _Nullable)params handler:(SWKPaywallPresentationHandler * _Nullable)handler feature:(void (^ _Nonnull)(void))feature SWIFT_UNAVAILABLE_MSG("'register' has been renamed to 'registerWithPlacement:params:handler:feature:'");
- (void)registerWithEvent:(NSString * _Nonnull)event params:(NSDictionary<NSString *, id> * _Nullable)params handler:(SWKPaywallPresentationHandler * _Nullable)handler SWIFT_UNAVAILABLE_MSG("'register' has been renamed to 'registerWithPlacement:params:handler:'");
- (void)registerWithEvent:(NSString * _Nonnull)event params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_UNAVAILABLE_MSG("'register' has been renamed to 'registerWithPlacement:params:'");
- (void)registerWithEvent:(NSString * _Nonnull)event SWIFT_UNAVAILABLE_MSG("'register' has been renamed to 'registerWithPlacement:'");
- (void)preloadPaywallsForEvents:(NSSet<NSString *> * _Nonnull)eventNames SWIFT_UNAVAILABLE_MSG("'preloadPaywalls' has been renamed to 'preloadPaywallsForPlacements:'");
- (void)getPaywallForEvent:(NSString * _Nonnull)event params:(NSDictionary<NSString *, id> * _Nullable)params paywallOverrides:(SWKPaywallOverrides * _Nullable)paywallOverrides delegate:(id <SWKPaywallViewControllerDelegate> _Nonnull)delegate completion:(void (^ _Nonnull)(SWKGetPaywallResult * _Nonnull))completion SWIFT_UNAVAILABLE_MSG("'getPaywall' has been renamed to 'getPaywallForPlacement:params:paywallOverrides:delegate:completion:'");
- (void)getPresentationResultForEvent:(NSString * _Nonnull)event params:(NSDictionary<NSString *, id> * _Nullable)params completionHandler:(void (^ _Nonnull)(SWKPresentationResult * _Nonnull))completionHandler SWIFT_UNAVAILABLE_MSG("'getPresentationResult' has been renamed to 'getPresentationResultForPlacement:params:completionHandler:'");
@end

@class SWKSuperwallEventInfo;

/// Objective-C-only delegate protocol that handles Superwall lifecycle events.
/// The delegate methods receive callbacks from the SDK in response to certain events that happen on the paywall.
/// You set this directly using <code>Superwall/objcDelegate</code>.
/// To learn how to conform to the delegate in your app and best practices, see
/// <a href="https://docs.superwall.com/docs/3rd-party-analytics">our docs</a>.
SWIFT_PROTOCOL_NAMED("SuperwallDelegateObjc")
@protocol SWKSuperwallDelegate
@optional
/// Called when the user taps a button on your paywall that has a <code>data-pw-custom</code> tag attached.
/// To learn more about using this function, see <a href="https://docs.superwall.com/docs/custom-paywall-events">Custom Paywall Actions</a>.
/// To learn about the types of tags that can be attached to elements on your paywall, see
/// <a href="https://docs.superwall.com/docs/data-tags">Data Tags</a>.
/// \param name The value of the <code>data-pw-custom</code> tag in your HTML element that the user selected.
///
- (void)handleCustomPaywallActionWithName:(NSString * _Nonnull)name;
/// Called right before the paywall is dismissed.
- (void)willDismissPaywallWithInfo:(SWKPaywallInfo * _Nonnull)paywallInfo;
/// Called right before the paywall is presented.
- (void)willPresentPaywallWithInfo:(SWKPaywallInfo * _Nonnull)paywallInfo;
/// Called right after the paywall is dismissed.
- (void)didDismissPaywallWithInfo:(SWKPaywallInfo * _Nonnull)paywallInfo;
/// Called right after the paywall is presented.
- (void)didPresentPaywallWithInfo:(SWKPaywallInfo * _Nonnull)paywallInfo;
/// Called when the user opens a URL by selecting an element on your paywall that has a <code>data-pw-open-url</code> tag.
/// \param url The URL to open
///
- (void)paywallWillOpenURLWithUrl:(NSURL * _Nonnull)url;
/// Called when the user taps a deep link in your paywall.
/// \param url The deep link URL to open
///
- (void)paywallWillOpenDeepLinkWithUrl:(NSURL * _Nonnull)url;
/// Called whenever an internal placement is tracked.
/// Use this method when you want to track internal placements in your own analytics.
/// You can switch over <code>info.placement</code> for a list of possible cases. See
/// <a href="https://docs.superwall.com/docs/tracking-analytics">Superwall Placements</a> for more info.
/// \param placementInfo A <code>SuperwallPlacementInfo</code> object containing a <code>placement</code> and a <code>params</code> parameter.
///
- (void)handleSuperwallPlacementWithInfo:(SWKSuperwallEventInfo * _Nonnull)placementInfo SWIFT_DEPRECATED_MSG("", "handleSuperwallEventWithInfo:");
/// Called whenever an internal event is tracked.
/// Use this method when you want to track internal events in your own analytics.
/// You can switch over <code>info.event</code> for a list of possible cases. See
/// <a href="https://docs.superwall.com/docs/tracking-analytics">Superwall Placements</a> for more info.
/// \param eventInfo A <code>SuperwallEventInfo</code> object containing an <code>event</code> and a <code>params</code> parameter.
///
- (void)handleSuperwallEventWithInfo:(SWKSuperwallEventInfo * _Nonnull)eventInfo;
/// Called when the <code>Superwall/subscriptionStatusObjc</code> changes.
/// You can use this function to update the state of your application.
/// \param oldValue The old value of the subscriptionStatus <code>Superwall/subscriptionStatusObjc</code>.
///
/// \param newValue The new value of the subscriptionStatus <code>Superwall/subscriptionStatusObjc</code>.
///
- (void)subscriptionStatusDidChangeFrom:(enum SWKSubscriptionStatus)oldValue to:(enum SWKSubscriptionStatus)newValue;
/// Receive all the log messages generated by the SDK.
/// \param level Specifies the detail of the logs returned from the SDK to the console.
/// Can be either <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, or <code>ERROR</code>, as defined by <code>LogLevel</code>.
///
/// \param scope The possible scope of logs to print to the console, as defined by <code>LogScope</code>.
///
/// \param message The message associated with the log.
///
/// \param info A dictionary of information associated with the log.
///
/// \param error The error associated with the log.
///
- (void)handleLogWithLevel:(NSString * _Nonnull)level scope:(NSString * _Nonnull)scope message:(NSString * _Nullable)message info:(NSDictionary<NSString *, id> * _Nullable)info error:(NSError * _Nullable)error;
/// Called before the redemption of a code from a web paywall.
- (void)willRedeemLink;
/// A code was redeemed from a web paywall.
/// \param result A <code>RedemptionResult</code> enum containing information about
/// the redeemed the code.
///
- (void)didRedeemLinkWithResult:(SWKRedemptionResult * _Nonnull)result;
@end

enum SWKSuperwallEvent : NSInteger;

/// Contains information about the internally tracked superwall event.
SWIFT_CLASS_NAMED("SuperwallEventInfo")
@interface SWKSuperwallEventInfo : NSObject
/// Objective-C compatible <code>SuperwallEvent</code>.
@property (nonatomic) enum SWKSuperwallEvent event;
/// A dictionary of params associated with the event.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull params;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Objective-C-only analytical placements that are automatically tracked by Superwall.
/// These placements are tracked internally by the SDK and sent to the delegate method <code>SuperwallKit/SuperwallDelegateObjc/handleSuperwallEvent(withInfo:)</code>.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKSuperwallEvent, "SuperwallEventObjc", closed) {
/// When the user is first seen in the app, regardless of whether the user is logged in or not.
  SWKSuperwallEventFirstSeen = 0,
/// Anytime the app enters the foreground
  SWKSuperwallEventAppOpen = 1,
/// When the app is launched from a cold start
/// This placement can be used to trigger a paywall. Just add the <code>app_launch</code> placement to a campaign.
  SWKSuperwallEventAppLaunch = 2,
/// When the SDK is configured for the first time.
/// This placement can be used to trigger a paywall. Just add the <code>app_install</code> placement to a campaign.
  SWKSuperwallEventAppInstall = 3,
/// When the user’s identity aliases after calling identify.
  SWKSuperwallEventIdentityAlias = 4,
/// When the app is opened at least an hour since last  <code>SuperwallEvent/appClose</code>.
/// This placement can be used to trigger a paywall. Just add the <code>session_start</code> placement to a campaign.
  SWKSuperwallEventSessionStart = 5,
/// When device attributes are sent to the backend.
  SWKSuperwallEventDeviceAttributes = 6,
/// Anytime the app leaves the foreground.
  SWKSuperwallEventAppClose = 7,
/// When a user opens the app via a deep link.
/// This placement can be used to trigger a paywall. Just add the <code>deepLink_open</code> placement to a campaign.
  SWKSuperwallEventDeepLink = 8,
/// When the registered placement triggers a paywall or holdout.
  SWKSuperwallEventTriggerFire = 9,
/// When a paywall is opened.
  SWKSuperwallEventPaywallOpen = 10,
/// When a paywall is closed.
  SWKSuperwallEventPaywallClose = 11,
/// When a user dismisses a paywall instead of purchasing
  SWKSuperwallEventPaywallDecline = 12,
/// When the payment sheet is displayed to the user.
  SWKSuperwallEventTransactionStart = 13,
/// When the payment sheet fails to complete a transaction (ignores user canceling the transaction).
  SWKSuperwallEventTransactionFail = 14,
/// When the user cancels a transaction.
  SWKSuperwallEventTransactionAbandon = 15,
/// When the user completes checkout in the payment sheet and any product was purchased.
  SWKSuperwallEventTransactionComplete = 16,
/// When the user successfully restores their purchases.
  SWKSuperwallEventTransactionRestore = 17,
/// When a transaction takes > 5 seconds to show the payment sheet.
  SWKSuperwallEventTransactionTimeout = 18,
/// When the user successfully completes a transaction for a subscription product with no introductory offers.
  SWKSuperwallEventSubscriptionStart = 19,
/// When the entitlement status did change.
  SWKSuperwallEventSubscriptionStatusDidChange = 20,
/// When the user successfully completes a transaction for a subscription product with an introductory offer.
  SWKSuperwallEventFreeTrialStart = 21,
/// When the user attributes are set.
  SWKSuperwallEventUserAttributes = 22,
/// When the user purchased a non recurring product.
  SWKSuperwallEventNonRecurringProductPurchase = 23,
/// When a paywall’s request to Superwall’s servers has started.
  SWKSuperwallEventPaywallResponseLoadStart = 24,
/// When a paywall’s request to Superwall’s servers returned a 404 error.
  SWKSuperwallEventPaywallResponseLoadNotFound = 25,
/// When a paywall’s request to Superwall’s servers produced an error.
  SWKSuperwallEventPaywallResponseLoadFail = 26,
/// When a paywall’s request to Superwall’s servers is complete.
  SWKSuperwallEventPaywallResponseLoadComplete = 27,
/// When a paywall’s website begins to load.
  SWKSuperwallEventPaywallWebviewLoadStart = 28,
/// When a paywall’s website fails to load.
  SWKSuperwallEventPaywallWebviewLoadFail = 29,
/// When a paywall’s website completes loading.
  SWKSuperwallEventPaywallWebviewLoadComplete = 30,
/// When the loading of a paywall’s website times out.
  SWKSuperwallEventPaywallWebviewLoadTimeout = 31,
/// When the loading of a paywall’s website falls back to a different CDN.
  SWKSuperwallEventPaywallWebviewLoadFallback = 32,
/// When the request to load the paywall’s products started.
  SWKSuperwallEventPaywallProductsLoadStart = 33,
/// When the request to load the paywall’s products failed.
  SWKSuperwallEventPaywallProductsLoadFail = 34,
/// When the request to load the paywall’s products completed.
  SWKSuperwallEventPaywallProductsLoadComplete = 35,
/// When the request to load the paywall’s products has failed and is being retried.
  SWKSuperwallEventPaywallProductsLoadRetry = 36,
/// Information about a paywall presentation request
  SWKSuperwallEventPaywallPresentationRequest = 37,
/// When the response to a paywall survey as been recorded.
  SWKSuperwallEventSurveyResponse = 38,
/// When the user touches the app’s UIWindow for the first time.
/// This is only tracked if there is an active <code>touches_began</code> trigger in a campaign.
  SWKSuperwallEventTouchesBegan = 39,
/// When the user taps the close button to skip the survey without recording a response.
  SWKSuperwallEventSurveyClose = 40,
/// When <code>Superwall/reset()</code> is called.
  SWKSuperwallEventReset = 41,
/// When a restore is initiated.
  SWKSuperwallEventRestoreStart = 42,
/// When a restore fails.
  SWKSuperwallEventRestoreFail = 43,
/// When a restore completes.
  SWKSuperwallEventRestoreComplete = 44,
/// When the Superwall configuration refreshes.
  SWKSuperwallEventConfigRefresh = 45,
/// When a custom placement on the paywall is tapped.
  SWKSuperwallEventCustomPlacement = 46,
/// When the attributes that affect the configuration of Superwall are set or change.
  SWKSuperwallEventConfigAttributes = 47,
/// When all the experiment assignments are confirmed by calling <code>Superwall/confirmAllAssignments()</code>.
  SWKSuperwallEventConfirmAllAssignments = 48,
/// When the Superwall configuration fails to be retrieved.
  SWKSuperwallEventConfigFail = 49,
/// When the AdServices token request starts.
  SWKSuperwallEventAdServicesTokenRequestStart = 50,
/// When the AdServices token request fails.
  SWKSuperwallEventAdServicesTokenRequestFail = 51,
/// When the AdServices token request finishes.
  SWKSuperwallEventAdServicesTokenRequestComplete = 52,
/// When the shimmer view starts to show.
  SWKSuperwallEventShimmerViewStart = 53,
/// When the shimmer view stops showing.
  SWKSuperwallEventShimmerViewComplete = 54,
/// When the redemption of a code is initiated.
  SWKSuperwallEventRedemptionStart = 55,
/// When the redemption of a code completes.
  SWKSuperwallEventRedemptionComplete = 56,
/// When the redemption of a code fails.
  SWKSuperwallEventRedemptionFail = 57,
/// When the enrichment request starts.
  SWKSuperwallEventEnrichmentStart = 58,
/// When the enrichment request completes.
  SWKSuperwallEventEnrichmentComplete = 59,
/// When the enrichment request fails.
  SWKSuperwallEventEnrichmentFail = 60,
};

enum SWKStoreKitVersion : NSInteger;
@class SWKLogging;

/// Options for configuring Superwall, including paywall presentation and appearance.
/// Pass an instance of this class to
/// <code>Superwall/configure(apiKey:purchaseController:options:completion:)-52tke</code>.
SWIFT_CLASS_NAMED("SuperwallOptions")
@interface SWKSuperwallOptions : NSObject
/// Configures the appearance and behaviour of paywalls.
@property (nonatomic, strong) SWKPaywallOptions * _Nonnull paywalls;
/// The StoreKit version that the SDK should use.
/// The SDK will use StoreKit 2 by default if the app is running on iOS 15+, otherwise it
/// will fallback to StoreKit 1.
@property (nonatomic) enum SWKStoreKitVersion storeKitVersion;
/// A boolean that determines whether Superwall should observe StoreKit purchases outside of Superwall. Defaults to <code>false</code>.
/// When <code>true</code>, Superwall will observe StoreKit transactions and report them in your Superwall dashboard. Superwall will not finish transactions made outside of Superwall.
/// note:
/// You cannot use <code>Superwall/purchase(_:)</code> while this is <code>true</code>.
@property (nonatomic) BOOL shouldObservePurchases;
/// Enables the sending of non-Superwall tracked events and properties back to the Superwall servers.
/// Defaults to <code>true</code>.
/// Set this to <code>false</code> to stop external data collection. This will not affect
/// your ability to create placements based on properties.
@property (nonatomic) BOOL isExternalDataCollectionEnabled;
/// Sets the device locale identifier to use when evaluating audience filters.
/// This defaults to the <code>autoupdatingCurrent</code> locale identifier. However, you can set
/// this to any locale identifier to override it. E.g. <code>en_GB</code>. This is typically used for testing
/// purposes.
/// You can also preview your paywall in different locales using
/// <a href="https://docs.superwall.com/docs/in-app-paywall-previews">In-App Previews</a>.
@property (nonatomic, copy) NSString * _Nullable localeIdentifier;
/// Forwards events from the game controller to the paywall. Defaults to <code>false</code>.
/// Set this to <code>true</code> to forward events from the Game Controller to the Paywall via <code>Superwall/gamepadValueChanged(gamepad:element:)</code>.
@property (nonatomic) BOOL isGameControllerEnabled;
/// Enables experimental device variables. These are subject to change. Defaults to <code>false</code>.
@property (nonatomic) BOOL enableExperimentalDeviceVariables;
/// Determines the number of times the SDK will attempt to get the Superwall configuration after a network
/// failure before it times out. Defaults to 6.
/// Adjust this if you want the SDK to call the <code>PaywallPresentationHandler/onError(_:)</code>
/// handler of the <code>PaywallPresentationHandler</code> faster when you call <code>Superwall/register(placement:)</code>
@property (nonatomic) NSInteger maxConfigRetryCount;
/// The log scope and level to print to the console.
@property (nonatomic, strong) SWKLogging * _Nonnull logging;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An enum representing the StoreKit versions the SDK should use.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKStoreKitVersion, "StoreKitVersion", closed) {
/// Use StoreKit 1.
  SWKStoreKitVersionStoreKit1 = 0,
/// Use StoreKit 2.
  SWKStoreKitVersionStoreKit2 = 1,
};


/// Configuration for printing to the console.
SWIFT_CLASS_NAMED("Logging")
@interface SWKLogging : NSObject
/// Defines the minimum log level to print to the console. Defaults to <code>warn</code>.
@property (nonatomic) enum SWKLogLevel level;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SWKSurveyOption;
enum SWKSurveyShowCondition : NSInteger;

/// A survey attached to a paywall.
SWIFT_CLASS_NAMED("Survey")
@interface SWKSurvey : NSObject
/// The id of the survey.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The assigned key for the survey.
/// A user will only see one survey per assignment key.
@property (nonatomic, readonly, copy) NSString * _Nonnull assignmentKey;
/// The title of the survey’s alert controller.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The message of the survey’s alert controller.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// The options to display in the alert controller.
@property (nonatomic, readonly, copy) NSArray<SWKSurveyOption *> * _Nonnull options;
/// An enum whose cases indicate when the survey should show.
@property (nonatomic, readonly) enum SWKSurveyShowCondition presentationCondition;
/// The probability that the survey will present to the user.
@property (nonatomic, readonly) double presentationProbability;
/// Whether the “Other” option should appear to allow a user to provide a custom
/// response.
@property (nonatomic, readonly) BOOL includeOtherOption;
/// Whether a close button should appear to allow users to skip the survey.
@property (nonatomic, readonly) BOOL includeCloseOption;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An option to display in a paywall survey.
SWIFT_CLASS_NAMED("SurveyOption")
@interface SWKSurveyOption : NSObject
/// The id of the survey option.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The title of the survey option.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An enum whose cases indicate when a survey should
/// show.
typedef SWIFT_ENUM_NAMED(NSInteger, SWKSurveyShowCondition, "SurveyShowCondition", closed) {
/// Shows the survey when the user manually closes the paywall.
  SWKSurveyShowConditionOnManualClose = 0,
/// Shows the survey after the user purchases.
  SWKSurveyShowConditionOnPurchase = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SWKTransactionType, "TransactionType", closed) {
  SWKTransactionTypeNonRecurringProductPurchase = 0,
  SWKTransactionTypeFreeTrialStart = 1,
  SWKTransactionTypeSubscriptionStart = 2,
};













@interface UNUserNotificationCenter (SWIFT_EXTENSION(SuperwallKit))
/// Removes all of Superwall’s pending local notifications.
/// This method executes asynchronously, removing all pending notification requests on a secondary thread.
- (void)removeAllPendingSuperwallNotificationRequests;
/// Removes all of your app’s pending local notifications, except for those scheduled by Superwall.
/// This method executes asynchronously, removing all pending notification requests on a secondary thread.
- (void)removeAllPendingNonSuperwallNotificationRequests;
/// Removes all of Superwall’s delivered notifications from Notification Center.
/// Use this method to remove all of your app’s delivered notifications from Notification Center while keeping Superwall’s
/// notifications visible. The method executes asynchronously, returning immediately and removing the identifiers on a
/// background thread. This method does not affect any notification requests that are scheduled, but have not yet been delivered.
- (void)removeAllDeliveredSuperwallNotifications;
/// Removes all of your app’s delivered notifications from Notification Center, except for those belonging to Superwall.
/// Use this method to remove all of your app’s delivered notifications from Notification Center while keeping Superwall’s
/// notifications visible. The method executes asynchronously, returning immediately and removing the identifiers on a
/// background thread. This method does not affect any notification requests that are scheduled, but have not yet been delivered.
- (void)removeAllDeliveredNonSuperwallNotifications;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
